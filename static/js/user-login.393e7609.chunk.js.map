{"version":3,"sources":["helpers/Notifikasi.js","helpers/IntlMessages.js","components/common/react-notifications/index.js","views/user/login.js"],"names":["createNotification","type","textA","b","textB","NotificationManager","success","warning","error","alert","info","injectIntl","props","withRef","Notifications","Login","onUserLogin","values","loading","email","password","mControl","loginUser","then","resp","clientID","token","username","jenisUser","superadmin","klinik","localStorage","setItem","JSON","stringify","window","location","href","Notifikasi","catch","err","isArray","length","message","validateEmail","value","test","validatePassword","state","this","initialValues","className","xxs","md","to","id","onSubmit","errors","touched","name","validate","color","size","Component","connect","authUser","user"],"mappings":"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","file":"static/js/user-login.393e7609.chunk.js","sourcesContent":["import { NotificationManager } from \"../components/common/react-notifications\";\r\nconst createNotification = (type, textA, b) => {\r\n    let textB = b || \"\";\r\n    switch (type) {\r\n        case \"success\":\r\n            NotificationManager.success(\r\n                textA,\r\n                textB,\r\n                3000,\r\n                null,\r\n                null,\r\n                \"filled\"\r\n            );\r\n            break;\r\n        case \"warning\":\r\n            NotificationManager.warning(\r\n                textA,\r\n                textB,\r\n                3000,\r\n                null,\r\n                null,\r\n                \"filled\"\r\n            );\r\n            break;\r\n        case \"error\":\r\n            NotificationManager.error(\r\n                textA,\r\n                textB,\r\n                5000,\r\n                () => {\r\n                    alert(\"callback\");\r\n                },\r\n                null,\r\n                \"filled\"\r\n            );\r\n            break;\r\n        default:\r\n            NotificationManager.info(\"Info message\");\r\n            break;\r\n    }\r\n};\r\nexport default createNotification;","import React from 'react';\r\nimport { FormattedMessage, injectIntl } from 'react-intl';\r\n\r\nconst InjectMassage = props => <FormattedMessage {...props} />;\r\n\r\nexport default injectIntl(InjectMassage, {\r\n    withRef: false\r\n});\r\n","import Notifications from './Notifications.js';\r\nimport NotificationContainer from './NotificationContainer';\r\nimport NotificationManager from './NotificationManager';\r\n\r\nexport { Notifications, NotificationContainer, NotificationManager };\r\nexport default Notifications;\r\n","import React, { Component } from \"react\";\r\nimport { Row, Card, CardTitle, Label, FormGroup, Button } from \"reactstrap\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\nimport { NotificationManager } from \"../../components/common/react-notifications\";\r\nimport { Formik, Form, Field } from \"formik\";\r\nimport { loginUser } from \"../../redux/actions\";\r\nimport { Colxx } from \"../../components/common/CustomBootstrap\";\r\nimport IntlMessages from \"../../helpers/IntlMessages\";\r\nimport Notifikasi from '../../helpers/Notifikasi'\r\nimport mControl from '../../Controler/c_User'\r\nimport { isArray } from \"util\";\r\nclass Login extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      email: \"\",\r\n      password: \"\"\r\n    };\r\n  }\r\n\r\n\r\n\r\n\r\n  onUserLogin = (values) => {\r\n    if (!this.props.loading) {\r\n      if (values.email !== \"\" && values.password !== \"\") {\r\n        //this.props.loginUser(values, this.props.history);\r\n        mControl.loginUser(values.email, values.password).then(resp => {\r\n          if (resp) {\r\n            const loginUser = {\r\n              clientID: resp.clientID,\r\n              token: resp.token,\r\n              username: values.email,\r\n              jenisUser: resp.jenisUser,\r\n              superadmin: resp.superadmin || false,\r\n              klinik: resp.klinik || {}\r\n\r\n            }\r\n            localStorage.setItem('keminaAdmin', JSON.stringify(loginUser))\r\n            window.location.href = '/';\r\n           // this.props.history.push('/')\r\n          } else {\r\n            Notifikasi(\"error\", \"Server tidak dapat menjalankan perintah Anda saat ini. Silakan coba sesaat lagi\", \"Gagal Login\")\r\n          }\r\n        }).catch(err => {\r\n          if (isArray(err) && err.length > 0) {\r\n            Notifikasi(\"error\", err[0].message, \"Gagal Login\")\r\n          } else if (typeof err) {\r\n            Notifikasi(\"error\", err.message, \"Gagal Login\")\r\n          } else {\r\n            console.log(err);\r\n          }\r\n        })\r\n      }\r\n    }\r\n  }\r\n\r\n  validateEmail = (value) => {\r\n    let error;\r\n    if (!value) {\r\n      error = \"Please enter your email address\";\r\n    } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(value)) {\r\n      error = \"Invalid email address\";\r\n    }\r\n    return error;\r\n  }\r\n\r\n  validatePassword = (value) => {\r\n    let error;\r\n    if (!value) {\r\n      error = \"Please enter your password\";\r\n    } else if (value.length < 4) {\r\n      error = \"Value must be longer than 3 characters\";\r\n    }\r\n    return error;\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    if (this.props.error) {\r\n      NotificationManager.warning(\r\n        this.props.error,\r\n        \"Login Error\",\r\n        3000,\r\n        null,\r\n        null,\r\n        ''\r\n      );\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { password, email } = this.state;\r\n    const initialValues = { email, password };\r\n\r\n    return (\r\n      <Row className=\"h-100\">\r\n        <Colxx xxs=\"12\" md=\"10\" className=\"mx-auto my-auto\">\r\n          <Card className=\"auth-card\">\r\n            <div className=\"position-relative image-side \">\r\n              <p className=\"text-white h2\">Welcome to Kemina Dental Care</p>\r\n              <p className=\"white mb-0\">\r\n                Please use your credentials to login.\r\n                <br />\r\n                If you are not a account, please{\" \"}\r\n                <NavLink to={`/user/register`} className=\"linkColor\">\r\n                  <b>register</b>\r\n                </NavLink>\r\n                .\r\n              </p>\r\n            </div>\r\n            <div className=\"form-side\">\r\n              <NavLink to={`/`} className=\"white\">\r\n                <span className=\"logo-single\" />\r\n              </NavLink>\r\n              <CardTitle className=\"mb-4\">\r\n                <IntlMessages id=\"user.login-title\" />\r\n              </CardTitle>\r\n\r\n              <Formik\r\n                initialValues={initialValues}\r\n                onSubmit={this.onUserLogin}>\r\n                {({ errors, touched }) => (\r\n                  <Form className=\"av-tooltip tooltip-label-bottom\">\r\n                    <FormGroup className=\"form-group has-float-label\">\r\n                      <Label>\r\n                        <IntlMessages id=\"user.email\" />\r\n                      </Label>\r\n                      <Field\r\n                        className=\"form-control\"\r\n                        name=\"email\"\r\n                        validate={this.validateEmail}\r\n                      />\r\n                      {errors.email && touched.email && (\r\n                        <div className=\"invalid-feedback d-block\">\r\n                          {errors.email}\r\n                        </div>\r\n                      )}\r\n                    </FormGroup>\r\n                    <FormGroup className=\"form-group has-float-label\">\r\n                      <Label>\r\n                        <IntlMessages id=\"user.password\" />\r\n                      </Label>\r\n                      <Field\r\n                        className=\"form-control\"\r\n                        type=\"password\"\r\n                        name=\"password\"\r\n                        validate={this.validatePassword}\r\n                      />\r\n                      {errors.password && touched.password && (\r\n                        <div className=\"invalid-feedback d-block\">\r\n                          {errors.password}\r\n                        </div>\r\n                      )}\r\n                    </FormGroup>\r\n                    <div className=\"d-flex justify-content-between align-items-center\">\r\n                      <NavLink to={`/user/forgot-password`}>\r\n                        <IntlMessages id=\"user.forgot-password-question\" />\r\n                      </NavLink>\r\n                      <Button\r\n                        color=\"primary\"\r\n                        className={`btn-shadow btn-multiple-state ${this.props.loading ? \"show-spinner\" : \"\"}`}\r\n                        size=\"lg\"\r\n                      >\r\n                        <span className=\"spinner d-inline-block\">\r\n                          <span className=\"bounce1\" />\r\n                          <span className=\"bounce2\" />\r\n                          <span className=\"bounce3\" />\r\n                        </span>\r\n                        <span className=\"label\"><IntlMessages id=\"user.login-button\" /></span>\r\n                      </Button>\r\n                    </div>\r\n\r\n\r\n                  </Form>\r\n                )}\r\n              </Formik>\r\n            </div>\r\n          </Card>\r\n        </Colxx>\r\n      </Row>\r\n    );\r\n  }\r\n}\r\nconst mapStateToProps = ({ authUser }) => {\r\n  const { user, loading, error } = authUser;\r\n  return { user, loading, error };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  {\r\n    loginUser\r\n  }\r\n)(Login);\r\n"],"sourceRoot":""}