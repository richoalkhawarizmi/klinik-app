{"version":3,"sources":["components/common/CustomBootstrap.js","Controler/c_User.js","../node_modules/reactnumberwithcommas/index.js","../node_modules/reactstrap/es/Card.js","../node_modules/reactstrap/es/CardBody.js","containers/navs/Breadcrumb.js","data/hariDefault.js","../node_modules/reactstrap/es/Table.js","Controler/c_Dashboard.js","views/app/dashboard/DashboardAdmin.js","views/app/dashboard/DashboardDokter.js","views/app/dashboard/DashboardPasien.js","views/app/dashboard/index.js"],"names":["Colxx","props","widths","Separator","className","User","dataUser","clientID","token","username","jenisUser","Promise","resolve","reject","query","GQL","then","resp","errors","data","detailUser","catch","err","selectKlinikPasien","kodeklinik","namaklinik","updateLogin","simpanUser","selectKlinikAdmin","hapusUser","registerUser","nama","alamat","password","noHp","aktivasiUser","salt","forgetPassword","reqResetPassword","resetPassword","resetNewPassword","loginUser","updateProfil","numberWithCommas","x","parseFloat","Math","round","toFixed","toString","replace","propTypes","tag","tagPropType","inverse","PropTypes","bool","color","string","body","outline","cssModule","object","innerRef","oneOfType","func","Card","Tag","attributes","_objectWithoutPropertiesLoose","classes","mapToCssModules","classNames","React","createElement","_extends","ref","defaultProps","CardBody","getMenuTitle","sub","id","getUrl","path","index","split","BreadcrumbItems","match","substr","paths","length","indexOf","filter","map","key","active","to","BreadcrumbContainer","heading","hari","size","bordered","borderless","striped","dark","hover","responsive","responsiveTag","Table","ResponsiveTag","table","responsiveClassName","Dashboard","loadAdmin","moment","format","listJadwalDokter","listJanji","listAntri","hitungStokKeluar","hitungStokMasuk","totalPenjualan","listJanjiNotConfirm","listJanjiConfirm","listStokKeluar","el","qty","reduce","a","b","listStokMasuk","laporanPenjualan","totalTagihan","loadDokter","dokter","listFinish","laporanPelayananPasienByDokter","loadPasien","pasien","janji","jumlahBerobat","datangKembali","JanjibyPasien","listRekamMedis","find","isDatangKembali","authLogin","useState","isReload","setIsReload","listDokter","setListDokter","hitungJanji","setHitungJanji","hitungAntri","setHitungAntri","setHitungStokKeluar","setHitungStokMasuk","setTotalPenjualan","useEffect","mDashboard","klinik","console","error","finally","Row","Col","xs","md","style","marginTop","i","jadwalNow","jamMulai","jamSelesai","hitungFinish","setHitungFinish","setJanji","setDatangKembali","setJumlahBerobat","kodetrans","tanggalJanji","tanggal","fontSize","keterangan","JSON","parse","localStorage","getItem","user","setUser","isLoad","setIsLoad","mUser","xxs","Breadcrumb","height","DashboardPasien","DashboardDokter","DashboardAdmin"],"mappings":"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","file":"static/js/43.e39bba88.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Col } from 'reactstrap';\r\nconst Colxx = (props) => (\r\n    <Col {...props} widths={['xxs', 'xs', 'sm', 'md', 'lg', 'xl', 'xxl']} />\r\n);\r\nconst Separator = (props) => (\r\n    <div className={`separator ${props.className}`}></div>\r\n);\r\nexport { Colxx,Separator }","import GQL from '../helpers/GQL'\r\n\r\n\r\nconst User = {\r\n\tdataUser: (clientID, token, username, jenisUser) => {\r\n\t\treturn new Promise((resolve, reject) => {\r\n\t\t\tconst query = `\r\n                query {\r\n                    detailUser(username:\"${username}\",jenisUser:\"${jenisUser}\"){\r\n                        superadmin\r\n                        nama\r\n                        noHp\r\n                        jenisUser\r\n                  }\r\n                }\r\n            `\r\n\t\t\tGQL(query, clientID, token).then(resp => {\r\n\t\t\t\tif (resp.errors) return (reject(resp.errors));;\r\n\t\t\t\tif (resp.data && resp.data.detailUser) return (resolve(resp.data.detailUser));\r\n\t\t\t\treturn (resolve([]))\r\n\t\t\t}).catch(err => {\r\n\t\t\t\treturn (reject(err));\r\n\t\t\t})\r\n\t\t})\r\n\t},\r\n\tselectKlinikPasien: (clientID, token, kodeklinik, namaklinik, username) => {\r\n\t\treturn new Promise((resolve, reject) => {\r\n\t\t\tconst query = `\r\n\t\t\tmutation {\r\n\t\t\t\tupdateLogin(kodeklinik: \"${kodeklinik}\", namaklinik: \"${namaklinik}\")\r\n\t\t\t\tsimpanUser(input:{username:\"${username}\"}, kodeklinik:\"${kodeklinik}\", namaklinik: \"${namaklinik}\")\r\n\t\t\t  }\r\n            `\r\n\t\t\tGQL(query, clientID, token).then(resp => {\r\n\t\t\t\tif (resp.errors) return (reject(resp.errors));\r\n\t\t\t\tif (resp.data && resp.data.updateLogin && resp.data.simpanUser) return (resolve(true));\r\n\t\t\t\treturn (resolve([]))\r\n\t\t\t}).catch(err => {\r\n\t\t\t\treturn (reject(err));\r\n\t\t\t})\r\n\t\t})\r\n\t},\r\n\tselectKlinikAdmin: (clientID, token, kodeklinik, namaklinik) => {\r\n\t\treturn new Promise((resolve, reject) => {\r\n\t\t\tconst query = `\r\n\t\t\tmutation {\r\n\t\t\t\tupdateLogin(kodeklinik: \"${kodeklinik}\", namaklinik: \"${namaklinik}\")\r\n\t\t\t  }\r\n            `\r\n\t\t\tGQL(query, clientID, token).then(resp => {\r\n\t\t\t\tif (resp.errors) return (reject(resp.errors));\r\n\t\t\t\tif (resp.data && resp.data.updateLogin) return (resolve(true));\r\n\t\t\t\treturn (resolve([]))\r\n\t\t\t}).catch(err => {\r\n\t\t\t\treturn (reject(err));\r\n\t\t\t})\r\n\t\t})\r\n\t},\r\n\thapusUser: (clientID, token, username) => {\r\n\t\treturn new Promise((resolve, reject) => {\r\n\t\t\tconst query = `\r\n\t\t\tmutation {\r\n\t\t\t\thapusUser(username: \"${username}\")\r\n\t\t\t  }\r\n            `\r\n\t\t\tGQL(query, clientID, token).then(resp => {\r\n\t\t\t\tif (resp.errors) return (reject(resp.errors));\r\n\t\t\t\tif (resp.data && resp.data.hapusUser) return (resolve(true));\r\n\t\t\t\treturn (resolve([]))\r\n\t\t\t}).catch(err => {\r\n\t\t\t\treturn (reject(err));\r\n\t\t\t})\r\n\t\t})\r\n\t},\r\n\tregisterUser: (username, nama, alamat, password, noHp) => {\r\n\t\treturn new Promise((resolve, reject) => {\r\n\t\t\tconst query = `\r\n\t\t\tmutation {\r\n\t\t\t\tregisterUser(input:{\r\n\t\t\t\t\tusername:\"${username}\", \r\n\t\t\t\t\tpassword:\"${password}\", \r\n\t\t\t\t\tnama:\"${nama}\", \r\n\t\t\t\t\tnoHp:\"${noHp}\", \r\n\t\t\t\t\talamat:\"${alamat}\"})\r\n\t\t\t  }\r\n            `\r\n\t\t\tGQL(query).then(resp => {\r\n\t\t\t\tif (resp.errors) return (reject(resp.errors));\r\n\t\t\t\tif (resp.data && resp.data.registerUser) return (resolve(true));\r\n\t\t\t\treturn (resolve([]))\r\n\t\t\t}).catch(err => {\r\n\t\t\t\treturn (reject(err));\r\n\t\t\t})\r\n\t\t})\r\n\t},\r\n\taktivasiUser: (username, salt) => {\r\n\t\treturn new Promise((resolve, reject) => {\r\n\t\t\tconst query = `\r\n\t\t\tmutation {\r\n\t\t\t\taktivasiUser(username:\"${username}\", salt: \"${salt}\")\r\n\t\t\t  }\r\n            `\r\n\t\t\tGQL(query).then(resp => {\r\n\t\t\t\tif (resp.errors) return (reject(resp.errors));\r\n\t\t\t\tif (resp.data && resp.data.aktivasiUser) return (resolve(true));\r\n\t\t\t\treturn (resolve([]))\r\n\t\t\t}).catch(err => {\r\n\t\t\t\treturn (reject(err));\r\n\t\t\t})\r\n\t\t})\r\n\t},\r\n\tforgetPassword: (username) => {\r\n\t\treturn new Promise((resolve, reject) => {\r\n\t\t\tconst query = `\r\n\t\t\tmutation {\r\n\t\t\t\treqResetPassword(username:\"${username}\")\r\n\t\t\t  }\r\n            `\r\n\t\t\tGQL(query).then(resp => {\r\n\t\t\t\tif (resp.errors) return (reject(resp.errors));\r\n\t\t\t\tif (resp.data && resp.data.reqResetPassword) return (resolve(true));\r\n\t\t\t\treturn (resolve([]))\r\n\t\t\t}).catch(err => {\r\n\t\t\t\treturn (reject(err));\r\n\t\t\t})\r\n\t\t})\r\n\t},\r\n\tresetPassword: (username, salt, password) => {\r\n\t\treturn new Promise((resolve, reject) => {\r\n\t\t\tconst query = `\r\n\t\t\tmutation {\r\n\t\t\t\tresetNewPassword(username:\"${username}\", salt: \"${salt}\", password:\"${password}\")\r\n\t\t\t  }\r\n            `\r\n\t\t\tGQL(query).then(resp => {\r\n\t\t\t\tif (resp.errors) return (reject(resp.errors));\r\n\t\t\t\tif (resp.data && resp.data.resetNewPassword) return (resolve(true));\r\n\t\t\t\treturn (resolve([]))\r\n\t\t\t}).catch(err => {\r\n\t\t\t\treturn (reject(err));\r\n\t\t\t})\r\n\t\t})\r\n\t},\r\n\tloginUser: (username, password) => {\r\n\t\treturn new Promise((resolve, reject) => {\r\n\t\t\tconst query = `\r\n\t\t\tquery {\r\n\t\t\t\tloginUser(username:\"${username}\",password:\"${password}\"){\r\n\t\t\t\t\tclientID\r\n\t\t\t\t\ttoken\r\n\t\t\t\t\tsuperadmin\r\n\t\t\t\t\tjenisUser\r\n\t\t\t\t\tklinik{\r\n\t\t\t\t\t\tkodeklinik\r\n\t\t\t\t\t\tnamaklinik\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t  }\r\n            `\r\n\t\t\tGQL(query).then(resp => {\r\n\t\t\t\tif (resp.errors) return (reject(resp.errors));\r\n\t\t\t\tif (resp.data && resp.data.loginUser) return (resolve(resp.data.loginUser));\r\n\t\t\t\treturn (resolve([]))\r\n\t\t\t}).catch(err => {\r\n\t\t\t\treturn (reject(err));\r\n\t\t\t})\r\n\t\t})\r\n\t},\r\n\tdetailUser: (clientID, token, username, jenisUser) => {\r\n\t\treturn new Promise((resolve, reject) => {\r\n\t\t\tconst query = `\r\n                query {\r\n                    detailUser(username:\"${username}\",jenisUser:\"${jenisUser}\"){\r\n                        username\r\n                        nama\r\n\t\t\t\t\t\tnoHp\r\n\t\t\t\t\t\talamat\r\n                  }\r\n                }\r\n            `\r\n\t\t\tGQL(query, clientID, token).then(resp => {\r\n\t\t\t\tif (resp.errors) return (reject(resp.errors));;\r\n\t\t\t\tif (resp.data && resp.data.detailUser) return (resolve(resp.data.detailUser));\r\n\t\t\t\treturn (resolve([]))\r\n\t\t\t}).catch(err => {\r\n\t\t\t\treturn (reject(err));\r\n\t\t\t})\r\n\t\t})\r\n\t},\r\n\tupdateProfil: (clientID, token, username,  nama, noHp, alamat, jenisUser,  kodeklinik, namaklinik) => {\r\n\t\treturn new Promise((resolve, reject) => {\r\n\t\t\tconst query = `\r\n\t\t\tmutation {\r\n\t\t\t\tsimpanUser(input:{username:\"${username}\", nama:\"${nama}\", noHp:\"${noHp}\", alamat:\"${alamat}\", jenisUser:\"${jenisUser}\"},kodeklinik: \"${kodeklinik}\", namaklinik: \"${namaklinik}\")\r\n\t\t\t  }\r\n            `\r\n\t\t\tGQL(query, clientID, token).then(resp => {\r\n\t\t\t\tif (resp.errors) return (reject(resp.errors));\r\n\t\t\t\tif (resp.data && resp.data.simpanUser) return (resolve(true));\r\n\t\t\t\treturn (resolve([]))\r\n\t\t\t}).catch(err => {\r\n\t\t\t\treturn (reject(err));\r\n\t\t\t})\r\n\t\t})\r\n\t},\r\n};\r\n\r\nexport default User;\r\n","const numberWithCommas = (x) => {\r\n    if (!x) x = 0;\r\n    const a = parseFloat(Math.round(x * 100) / 100).toFixed(2)\r\n    return a.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\r\n}\r\nexport default numberWithCommas;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType } from './utils';\nvar propTypes = {\n  tag: tagPropType,\n  inverse: PropTypes.bool,\n  color: PropTypes.string,\n  body: PropTypes.bool,\n  outline: PropTypes.bool,\n  className: PropTypes.string,\n  cssModule: PropTypes.object,\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.string, PropTypes.func])\n};\nvar defaultProps = {\n  tag: 'div'\n};\n\nvar Card = function Card(props) {\n  var className = props.className,\n      cssModule = props.cssModule,\n      color = props.color,\n      body = props.body,\n      inverse = props.inverse,\n      outline = props.outline,\n      Tag = props.tag,\n      innerRef = props.innerRef,\n      attributes = _objectWithoutPropertiesLoose(props, [\"className\", \"cssModule\", \"color\", \"body\", \"inverse\", \"outline\", \"tag\", \"innerRef\"]);\n\n  var classes = mapToCssModules(classNames(className, 'card', inverse ? 'text-white' : false, body ? 'card-body' : false, color ? (outline ? 'border' : 'bg') + \"-\" + color : false), cssModule);\n  return React.createElement(Tag, _extends({}, attributes, {\n    className: classes,\n    ref: innerRef\n  }));\n};\n\nCard.propTypes = propTypes;\nCard.defaultProps = defaultProps;\nexport default Card;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType } from './utils';\nvar propTypes = {\n  tag: tagPropType,\n  className: PropTypes.string,\n  cssModule: PropTypes.object,\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.string, PropTypes.func])\n};\nvar defaultProps = {\n  tag: 'div'\n};\n\nvar CardBody = function CardBody(props) {\n  var className = props.className,\n      cssModule = props.cssModule,\n      innerRef = props.innerRef,\n      Tag = props.tag,\n      attributes = _objectWithoutPropertiesLoose(props, [\"className\", \"cssModule\", \"innerRef\", \"tag\"]);\n\n  var classes = mapToCssModules(classNames(className, 'card-body'), cssModule);\n  return React.createElement(Tag, _extends({}, attributes, {\n    className: classes,\n    ref: innerRef\n  }));\n};\n\nCardBody.propTypes = propTypes;\nCardBody.defaultProps = defaultProps;\nexport default CardBody;","import React, { Fragment } from \"react\";\r\nimport { Breadcrumb, BreadcrumbItem } from \"reactstrap\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport IntlMessages from \"../../helpers/IntlMessages\";\r\n\r\nconst getMenuTitle = sub => {\r\n  return <IntlMessages id={`menu.${sub}`} />;\r\n};\r\n\r\nconst getUrl = (path, sub, index) => {\r\n  if (index === 0) {\r\n    return \"\";\r\n  } else {\r\n    return path.split(sub)[0] + sub;\r\n  }\r\n};\r\n\r\nconst BreadcrumbContainer = ({ heading, match }) => {\r\n  return (\r\n    <Fragment>\r\n      {heading && <h1><IntlMessages id={heading}/></h1>}\r\n      <BreadcrumbItems match={match} />\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport const BreadcrumbItems = ({ match }) => {\r\n  const path = match.path.substr(1);\r\n  let paths = path.split(\"/\");\r\n  if (paths[paths.length - 1].indexOf(\":\") > -1) {\r\n    paths = paths.filter(x => x.indexOf(\":\") === -1);\r\n  }\r\n  return (\r\n    <Fragment>\r\n      <Breadcrumb className=\"pt-0 breadcrumb-container d-none d-sm-block d-lg-inline-block\">\r\n        {paths.map((sub, index) => {\r\n          return (\r\n            <BreadcrumbItem key={index} active={paths.length === index + 1}>\r\n              {paths.length !== index + 1 ? (\r\n                <NavLink to={\"/\" + getUrl(path, sub, index)}>\r\n                  {getMenuTitle(sub)}\r\n                </NavLink>\r\n              ) : (\r\n                getMenuTitle(sub)\r\n              )}\r\n            </BreadcrumbItem>\r\n          );\r\n        })}\r\n      </Breadcrumb>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default BreadcrumbContainer;\r\n","const hari = [\"Minggu\", \"Senin\", \"Selasa\", \"Rabu\", \"Kamis\", \"Jum'at\", \"Sabtu\"];\r\nexport default hari","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType } from './utils';\nvar propTypes = {\n  className: PropTypes.string,\n  cssModule: PropTypes.object,\n  size: PropTypes.string,\n  bordered: PropTypes.bool,\n  borderless: PropTypes.bool,\n  striped: PropTypes.bool,\n  dark: PropTypes.bool,\n  hover: PropTypes.bool,\n  responsive: PropTypes.oneOfType([PropTypes.bool, PropTypes.string]),\n  tag: tagPropType,\n  responsiveTag: tagPropType,\n  innerRef: PropTypes.oneOfType([PropTypes.func, PropTypes.string, PropTypes.object])\n};\nvar defaultProps = {\n  tag: 'table',\n  responsiveTag: 'div'\n};\n\nvar Table = function Table(props) {\n  var className = props.className,\n      cssModule = props.cssModule,\n      size = props.size,\n      bordered = props.bordered,\n      borderless = props.borderless,\n      striped = props.striped,\n      dark = props.dark,\n      hover = props.hover,\n      responsive = props.responsive,\n      Tag = props.tag,\n      ResponsiveTag = props.responsiveTag,\n      innerRef = props.innerRef,\n      attributes = _objectWithoutPropertiesLoose(props, [\"className\", \"cssModule\", \"size\", \"bordered\", \"borderless\", \"striped\", \"dark\", \"hover\", \"responsive\", \"tag\", \"responsiveTag\", \"innerRef\"]);\n\n  var classes = mapToCssModules(classNames(className, 'table', size ? 'table-' + size : false, bordered ? 'table-bordered' : false, borderless ? 'table-borderless' : false, striped ? 'table-striped' : false, dark ? 'table-dark' : false, hover ? 'table-hover' : false), cssModule);\n  var table = React.createElement(Tag, _extends({}, attributes, {\n    ref: innerRef,\n    className: classes\n  }));\n\n  if (responsive) {\n    var responsiveClassName = mapToCssModules(responsive === true ? 'table-responsive' : \"table-responsive-\" + responsive, cssModule);\n    return React.createElement(ResponsiveTag, {\n      className: responsiveClassName\n    }, table);\n  }\n\n  return table;\n};\n\nTable.propTypes = propTypes;\nTable.defaultProps = defaultProps;\nexport default Table;","import GQL from '../helpers/GQL'\r\nimport moment from 'moment-timezone'\r\n\r\n\r\nconst Dashboard = {\r\n    loadAdmin: (clientID, token, kodeklinik, hari) => {\r\n        return new Promise((resolve, reject) => {\r\n            const query = `\r\n                query {\r\n                    listJadwalDokter(kodeklinik:\"${kodeklinik}\",hari:\"${hari}\"){\r\n\t\t\t\t\t\tnama\r\n\t\t\t\t\t\tusername\r\n                        jadwalNow{\r\n                            hari\r\n                            jamMulai\r\n                            jamSelesai\r\n                        }\r\n                  }\r\n                  listJanjiNotConfirm(kodeklinik:\"${kodeklinik}\",tanggal:\"${moment().format(\"YYYY-MM-DD\")}\"){\r\n                        _id\r\n                        kodetrans\r\n                        pasien\r\n                    }\r\n                    listJanjiConfirm(kodeklinik:\"${kodeklinik}\",tanggal:\"${moment().format(\"YYYY-MM-DD\")}\"){\r\n                        _id\r\n                        kodetrans\r\n                        pasien\r\n                    }\r\n                    listStokKeluar(kodeklinik:\"${kodeklinik}\", tglDari:\"${moment().format(\"YYYY-MM-DD\")}\", tglSampai:\"${moment().format(\"YYYY-MM-DD\")}\"){\r\n                        qty\r\n                    } \r\n                    listStokMasuk(kodeklinik:\"${kodeklinik}\", tglDari:\"${moment().format(\"YYYY-MM-DD\")}\", tglSampai:\"${moment().format(\"YYYY-MM-DD\")}\"){\r\n                        qty\r\n                    }  \r\n                    laporanPenjualan(kodeklinik:\"${kodeklinik}\", tglDari:\"${moment().format(\"YYYY-MM-DD\")}\", tglSampai:\"${moment().format(\"YYYY-MM-DD\")}\"){\r\n                        totalTagihan\r\n                    }\r\n                }\r\n            `\r\n            GQL(query, clientID, token).then(resp => {\r\n                if (resp.errors) return (reject(resp.errors));\r\n                let listJadwalDokter = []\r\n                let listJanji = []\r\n                let listAntri = []\r\n                let hitungStokKeluar = 0\r\n                let hitungStokMasuk = 0\r\n                let totalPenjualan = 0\r\n                if (resp.data.listJadwalDokter) listJadwalDokter = resp.data.listJadwalDokter\r\n                if (resp.data.listJanjiNotConfirm) listJanji = resp.data.listJanjiNotConfirm\r\n                if (resp.data.listJanjiConfirm) listAntri = resp.data.listJanjiConfirm\r\n                if (resp.data.listStokKeluar) hitungStokKeluar = resp.data.listStokKeluar.map(el => el.qty).reduce((a, b) => a + b, 0) || 0\r\n                if (resp.data.listStokMasuk) hitungStokMasuk = resp.data.listStokMasuk.map(el => el.qty).reduce((a, b) => a + b, 0) || 0\r\n                if (resp.data.laporanPenjualan) totalPenjualan = resp.data.laporanPenjualan.map(el => el.totalTagihan).reduce((a, b) => a + b, 0) || 0\r\n                if (resp.data) return (resolve({ listJadwalDokter, listJanji, listAntri, hitungStokKeluar, hitungStokMasuk, totalPenjualan}));\r\n                return (resolve([]))\r\n            }).catch(err => {\r\n                return (reject(err));\r\n            })\r\n        })\r\n    },\r\n    loadDokter: (clientID, token, kodeklinik, hari, dokter) => {\r\n        return new Promise((resolve, reject) => {\r\n            const query = `\r\n                query {\r\n                    listJadwalDokter(kodeklinik:\"${kodeklinik}\",hari:\"${hari}\"){\r\n\t\t\t\t\t\tnama\r\n\t\t\t\t\t\tusername\r\n                        jadwalNow{\r\n                            hari\r\n                            jamMulai\r\n                            jamSelesai\r\n                        }\r\n                  }\r\n                  listJanjiNotConfirm(kodeklinik:\"${kodeklinik}\",tanggal:\"${moment().format(\"YYYY-MM-DD\")}\"){\r\n                        _id\r\n                        kodetrans\r\n                        pasien\r\n                    }\r\n                    listJanjiConfirm(kodeklinik:\"${kodeklinik}\",tanggal:\"${moment().format(\"YYYY-MM-DD\")}\"){\r\n                        _id\r\n                        kodetrans\r\n                        pasien\r\n                    }  \r\n                    laporanPelayananPasienByDokter(kodeklinik:\"${kodeklinik}\", tglDari:\"${moment().format(\"YYYY-MM-DD\")}\", tglSampai:\"${moment().format(\"YYYY-MM-DD\")}\", dokter:\"${dokter}\"){\r\n                        kodetrans\r\n                        kodedokter\r\n                        pasien\r\n                        totalTagihan\r\n                        tanggalBayar\r\n                        jumlahBayar\r\n                        kembalian\r\n                    }\r\n                }\r\n            `\r\n            GQL(query, clientID, token).then(resp => {\r\n                if (resp.errors) return (reject(resp.errors));\r\n                let listJadwalDokter = []\r\n                let listJanji = []\r\n                let listAntri = []\r\n                let listFinish = []\r\n                if (resp.data.listJadwalDokter) listJadwalDokter = resp.data.listJadwalDokter\r\n                if (resp.data.listJanjiNotConfirm) listJanji = resp.data.listJanjiNotConfirm\r\n                if (resp.data.listJanjiConfirm) listAntri = resp.data.listJanjiConfirm\r\n                if (resp.data.laporanPelayananPasienByDokter) listFinish = resp.data.laporanPelayananPasienByDokter\r\n                if (resp.data) return (resolve({ listJadwalDokter, listJanji, listAntri, listFinish}));\r\n                return (resolve([]))\r\n            }).catch(err => {\r\n                return (reject(err));\r\n            })\r\n        })\r\n    },\r\n    loadPasien: (clientID, token, kodeklinik, hari, pasien) => {\r\n        return new Promise((resolve, reject) => {\r\n            const query = `\r\n                query {\r\n                    listJadwalDokter(kodeklinik:\"${kodeklinik}\",hari:\"${hari}\"){\r\n\t\t\t\t\t\tnama\r\n\t\t\t\t\t\tusername\r\n                        jadwalNow{\r\n                            hari\r\n                            jamMulai\r\n                            jamSelesai\r\n                        }\r\n                    }\r\n                    JanjibyPasien(kodeklinik:\"${kodeklinik}\",pasien:\"${pasien}\"){\r\n\t\t\t\t\t\tkodetrans\r\n\t\t\t\t\t\tpasien\r\n\t\t\t\t\t\tkodedokter\r\n\t\t\t\t\t\tjanji{\r\n\t\t\t\t\t\t  tanggalJanji\r\n\t\t\t\t\t\t  jamMulaiJanji\r\n\t\t\t\t\t\t  jamSelesaiJanji\r\n\t\t\t\t\t\t}\r\n                    }\r\n                    listRekamMedis(pasien:\"${pasien}\", kodeklinik:\"${kodeklinik}\"){\r\n                        kodetrans\r\n                        isDatangKembali\r\n                        datangKembali{\r\n                            tanggal\r\n                            keterangan\r\n                        }\r\n                    }\r\n                }\r\n            `\r\n            GQL(query, clientID, token).then(resp => {\r\n                if (resp.errors) return (reject(resp.errors));\r\n                let listJadwalDokter = []\r\n                let janji = {}\r\n                let jumlahBerobat = 0\r\n                let datangKembali = {}\r\n                if (resp.data.listJadwalDokter) listJadwalDokter = resp.data.listJadwalDokter\r\n                if (resp.data.JanjibyPasien) janji = resp.data.JanjibyPasien\r\n                if (resp.data.listRekamMedis){\r\n                    jumlahBerobat = resp.data.listRekamMedis.length\r\n                    datangKembali = resp.data.listRekamMedis.find(el => el.isDatangKembali)\r\n                }\r\n                if (resp.data) return (resolve({ listJadwalDokter, janji, jumlahBerobat, datangKembali}));\r\n                return (resolve([]))\r\n            }).catch(err => {\r\n                return (reject(err));\r\n            })\r\n        })\r\n    },\r\n};\r\n\r\nexport default Dashboard;\r\n","import React, { Fragment, useState, useEffect } from \"react\";\r\nimport { Col, Card, CardBody, Row, Table } from \"reactstrap\";\r\nimport numberWithCommas from \"reactnumberwithcommas\";\r\nimport moment from 'moment-timezone'\r\nimport mDashboard from '../../../Controler/c_Dashboard'\r\nimport hari from '../../../data/hariDefault'\r\n\r\nconst Dashboard = props => {\r\n    const authLogin = props.authLogin\r\n    const [isReload, setIsReload] = useState(true)\r\n    const [listDokter, setListDokter] = useState([])\r\n    const [hitungJanji, setHitungJanji] = useState(0)\r\n    const [hitungAntri, setHitungAntri] = useState(0)\r\n    const [hitungStokKeluar, setHitungStokKeluar] = useState(0)\r\n    const [hitungStokMasuk, setHitungStokMasuk] = useState(0)\r\n    const [totalPenjualan, setTotalPenjualan] = useState(0)\r\n    useEffect(() => {\r\n        mDashboard.loadAdmin(authLogin.clientID, authLogin.token, authLogin.klinik.kodeklinik, hari[moment().format(\"d\")]).then(resp => {\r\n            if (resp.listJadwalDokter) setListDokter(resp.listJadwalDokter);\r\n            if (resp.listJanji) setHitungJanji(resp.listJanji.length);\r\n            if (resp.listAntri) setHitungAntri(resp.listAntri.length);\r\n            if (resp.hitungStokKeluar) setHitungStokKeluar(resp.hitungStokKeluar);\r\n            if (resp.hitungStokMasuk) setHitungStokMasuk(resp.hitungStokMasuk);\r\n            if (resp.totalPenjualan) setTotalPenjualan(resp.totalPenjualan);\r\n        }).catch(err => {\r\n            console.error(err);\r\n        }).finally(() => setIsReload(false));\r\n        return () => {\r\n\r\n        }\r\n    }, [authLogin.clientID, authLogin.token, authLogin.username, authLogin.klinik.kodeklinik, isReload])\r\n    return (\r\n        <Fragment>\r\n            <Row>\r\n                <Col xs={12}>\r\n                    <h4 className=\"text-right\"><b>{moment().format(\"DD-MMM-YYYY\")}</b></h4>\r\n                </Col>\r\n                <Col xs={12} md={4} className=\"marginDas\">\r\n                    <Card>\r\n                        <CardBody className=\"text-center\">\r\n                            <i className=\"iconsminds-clock\" />\r\n                            <p className=\"card-text font-weight-semibold mb-0\">Buat janji</p>\r\n                            <p className=\"lead text-center\">{hitungJanji} <small>Orang</small></p>\r\n                        </CardBody>\r\n                    </Card>\r\n                </Col>\r\n                <Col xs={12} md={4} className=\"marginDas\">\r\n                    <Card>\r\n                        <CardBody className=\"text-center\">\r\n                            <i className=\"iconsminds-clock\" />\r\n                            <p className=\"card-text font-weight-semibold mb-0\">Dalam Antrian</p>\r\n                            <p className=\"lead text-center\">{hitungAntri} <small>Orang</small></p>\r\n                        </CardBody>\r\n                    </Card>\r\n                </Col>\r\n                <Col xs={12} md={4} className=\"marginDas\">\r\n                    <Card>\r\n                        <CardBody className=\"text-center\">\r\n                            <i className=\"iconsminds-clock\" />\r\n                            <p className=\"card-text font-weight-semibold mb-0\">Dokter Piket</p>\r\n                            <p className=\"lead text-center\">{listDokter.length || 0} <small>Orang</small></p>\r\n                        </CardBody>\r\n                    </Card>\r\n                </Col>\r\n                <Col xs={12} md={4} className=\"marginDas\">\r\n                    <Card>\r\n                        <CardBody className=\"text-center\">\r\n                            <i className=\"iconsminds-clock\" />\r\n                            <p className=\"card-text font-weight-semibold mb-0\">Total Penjualan</p>\r\n                            <p className=\"lead text-center\">Rp. {numberWithCommas(totalPenjualan)}</p>\r\n                        </CardBody>\r\n                    </Card>\r\n                </Col>\r\n                <Col xs={12} md={4} className=\"marginDas\">\r\n                    <Card>\r\n                        <CardBody className=\"text-center\">\r\n                            <i className=\"iconsminds-clock\" />\r\n                            <p className=\"card-text font-weight-semibold mb-0\">Jumlah Stok Keluar</p>\r\n                            <p className=\"lead text-center\">{hitungStokKeluar * -1} <small> Produk</small></p>\r\n                        </CardBody>\r\n                    </Card>\r\n                </Col>\r\n                <Col xs={12} md={4} className=\"marginDas\">\r\n                    <Card>\r\n                        <CardBody className=\"text-center\">\r\n                            <i className=\"iconsminds-clock\" />\r\n                            <p className=\"card-text font-weight-semibold mb-0\">Jumlah Stok Masuk</p>\r\n                            <p className=\"lead text-center\">{hitungStokMasuk} <small> Produk</small></p>\r\n                        </CardBody>\r\n                    </Card>\r\n                </Col>\r\n                {listDokter.length > 0 && (\r\n                    <Col xs={12} className=\"marginDas\" >\r\n                        <Card>\r\n                            <h4 style={{ marginTop: 20 }} className=\"text-center\"><b>List Dokter</b></h4>\r\n                            <CardBody className=\"text-center\">\r\n                                <Table bordered hover responsive>\r\n                                    <thead>\r\n                                        <tr>\r\n                                            <th>Dokter</th>\r\n                                            <th>Jam Mulai</th>\r\n                                            <th>Jam Selesai</th>\r\n                                        </tr>\r\n                                    </thead>\r\n                                    <tbody>\r\n                                        {listDokter.map((el, i) => {\r\n                                            return (\r\n                                                <tr key={i}>\r\n                                                    <td>{el.nama}</td>\r\n                                                    <td>{el.jadwalNow.jamMulai}</td>\r\n                                                    <td>{el.jadwalNow.jamSelesai}</td>\r\n                                                </tr>\r\n                                            )\r\n                                        })}\r\n                                    </tbody>\r\n                                </Table>\r\n                            </CardBody>\r\n                        </Card>\r\n                    </Col>\r\n                )}\r\n            </Row>\r\n\r\n        </Fragment>\r\n    )\r\n}\r\nexport default Dashboard\r\n","import React, { Fragment, useState, useEffect } from \"react\";\r\nimport { Col, Card, CardBody, Row, Table } from \"reactstrap\";\r\nimport moment from 'moment-timezone'\r\nimport mDashboard from '../../../Controler/c_Dashboard'\r\nimport hari from '../../../data/hariDefault'\r\n\r\nconst Dashboard = props => {\r\n    const authLogin = props.authLogin\r\n    const [isReload, setIsReload] = useState(true)\r\n    const [listDokter, setListDokter] = useState([])\r\n    const [hitungJanji, setHitungJanji] = useState(0)\r\n    const [hitungAntri, setHitungAntri] = useState(0)\r\n    const [hitungFinish, setHitungFinish] = useState(0)\r\n    useEffect(() => {\r\n        mDashboard.loadDokter(authLogin.clientID, authLogin.token, authLogin.klinik.kodeklinik, hari[moment().format(\"d\")], authLogin.username).then(resp => {\r\n            if (resp.listJadwalDokter) setListDokter(resp.listJadwalDokter);\r\n            if (resp.listJanji) setHitungJanji(resp.listJanji.length);\r\n            if (resp.listAntri) setHitungAntri(resp.listAntri.length);\r\n            if (resp.listFinish) setHitungFinish(resp.listFinish.length);\r\n        }).catch(err => {\r\n            console.error(err);\r\n        }).finally(() => setIsReload(false));\r\n        return () => {\r\n\r\n        }\r\n    }, [authLogin.clientID, authLogin.token, authLogin.username, authLogin.klinik.kodeklinik, isReload])\r\n    return (\r\n        <Fragment>\r\n            <Row>\r\n                <Col xs={12}>\r\n                    <h4 className=\"text-right\"><b>{moment().format(\"DD-MMM-YYYY\")}</b></h4>\r\n                </Col>\r\n                <Col xs={12} md={4} className=\"marginDas\">\r\n                    <Card>\r\n                        <CardBody className=\"text-center\">\r\n                            <i className=\"iconsminds-clock\" />\r\n                            <p className=\"card-text font-weight-semibold mb-0\">Buat janji</p>\r\n                            <p className=\"lead text-center\">{hitungJanji} <small>Orang</small></p>\r\n                        </CardBody>\r\n                    </Card>\r\n                </Col>\r\n                <Col xs={12} md={4} className=\"marginDas\">\r\n                    <Card>\r\n                        <CardBody className=\"text-center\">\r\n                            <i className=\"iconsminds-clock\" />\r\n                            <p className=\"card-text font-weight-semibold mb-0\">Dalam Antrian</p>\r\n                            <p className=\"lead text-center\">{hitungAntri} <small>Orang</small></p>\r\n                        </CardBody>\r\n                    </Card>\r\n                </Col>\r\n                <Col xs={12} md={4} className=\"marginDas\">\r\n                    <Card>\r\n                        <CardBody className=\"text-center\">\r\n                            <i className=\"iconsminds-clock\" />\r\n                            <p className=\"card-text font-weight-semibold mb-0\">Selesai Diperiksa</p>\r\n                            <p className=\"lead text-center\">{hitungFinish} <small>Orang</small></p>\r\n                        </CardBody>\r\n                    </Card>\r\n                </Col>\r\n                {listDokter.length > 0 && (\r\n                    <Col xs={12} className=\"marginDas\" >\r\n                        <Card>\r\n                            <h4 style={{ marginTop: 20 }} className=\"text-center\"><b>List Dokter</b></h4>\r\n                            <CardBody className=\"text-center\">\r\n                                <Table bordered hover responsive>\r\n                                    <thead>\r\n                                        <tr>\r\n                                            <th>Dokter</th>\r\n                                            <th>Jam Mulai</th>\r\n                                            <th>Jam Selesai</th>\r\n                                        </tr>\r\n                                    </thead>\r\n                                    <tbody>\r\n                                        {listDokter.map((el, i) => {\r\n                                            return (\r\n                                                <tr key={i}>\r\n                                                    <td>{el.nama}</td>\r\n                                                    <td>{el.jadwalNow.jamMulai}</td>\r\n                                                    <td>{el.jadwalNow.jamSelesai}</td>\r\n                                                </tr>\r\n                                            )\r\n                                        })}\r\n                                    </tbody>\r\n                                </Table>\r\n                            </CardBody>\r\n                        </Card>\r\n                    </Col>\r\n                )}\r\n            </Row>\r\n\r\n        </Fragment>\r\n    )\r\n}\r\nexport default Dashboard\r\n","import React, { Fragment, useState, useEffect } from \"react\";\r\nimport { Col, Card, CardBody, Row, Table } from \"reactstrap\";\r\nimport moment from 'moment-timezone'\r\nimport mDashboard from '../../../Controler/c_Dashboard'\r\nimport hari from '../../../data/hariDefault'\r\n\r\nconst Dashboard = props => {\r\n    const authLogin = props.authLogin\r\n    const [isReload, setIsReload] = useState(true)\r\n    const [listDokter, setListDokter] = useState([])\r\n    const [janji, setJanji] = useState({})\r\n    const [datangKembali, setDatangKembali] = useState({})\r\n    const [jumlahBerobat, setJumlahBerobat] = useState(0)\r\n    useEffect(() => {\r\n        mDashboard.loadPasien(authLogin.clientID, authLogin.token, authLogin.klinik.kodeklinik, hari[moment().format(\"d\")], authLogin.username).then(resp => {\r\n            if (resp.listJadwalDokter) setListDokter(resp.listJadwalDokter);\r\n            if (resp.janji) setJanji(resp.janji);\r\n            if (resp.datangKembali) setDatangKembali(resp.datangKembali);\r\n            if (resp.jumlahBerobat) setJumlahBerobat(resp.jumlahBerobat);\r\n        }).catch(err => {\r\n            console.error(err);\r\n        }).finally(() => setIsReload(false));\r\n        return () => {\r\n\r\n        }\r\n    }, [authLogin.clientID, authLogin.token, authLogin.username, authLogin.klinik.kodeklinik, isReload])\r\n    return (\r\n        <Fragment>\r\n            <Row>\r\n                <Col xs={12}>\r\n                    <h4 className=\"text-right\"><b>{moment().format(\"DD-MMM-YYYY\")}</b></h4>\r\n                </Col>\r\n                <Col xs={12} md={4} className=\"marginDas\">\r\n                    <Card>\r\n                        <CardBody className=\"text-center\">\r\n                            <i className=\"iconsminds-clock\" />\r\n                            <p className=\"card-text font-weight-semibold mb-0\">Janji</p>\r\n                            <p className=\"lead text-center\">{janji.kodetrans ? (<small>{moment(janji.janji.tanggalJanji).format(\"DD-MM-YYYY\")} </small>) : (<small>Belum ada</small>)}  <br/> &nbsp; </p>\r\n                        </CardBody>\r\n                    </Card>\r\n                </Col>\r\n                <Col xs={12} md={4} className=\"marginDas\">\r\n                    <Card>\r\n                        <CardBody className=\"text-center\">\r\n                            <i className=\"iconsminds-clock\" />\r\n                            <p className=\"card-text font-weight-semibold mb-0\">Pemeriksaan Kembali</p>\r\n                            <p className=\"lead text-center\">{datangKembali.isDatangKembali ? (<small>{moment(datangKembali.datangKembali.tanggal).format(\"DD-MM-YYYY\")}<br/> <span style={{fontSize:14}}> {datangKembali.datangKembali.keterangan})</span></small>) : (<small>Tidak ada</small>)}</p>\r\n                        </CardBody>\r\n                    </Card>\r\n                </Col>\r\n                <Col xs={12} md={4} className=\"marginDas\">\r\n                    <Card>\r\n                        <CardBody className=\"text-center\">\r\n                            <i className=\"iconsminds-clock\" />\r\n                            <p className=\"card-text font-weight-semibold mb-0\">Total Berobat</p>\r\n                            <p className=\"lead text-center\">{jumlahBerobat > 0 ? <Fragment>{jumlahBerobat} <small>Kali</small></Fragment> : <small>Belum Pernah</small>}  <br/> &nbsp;</p>\r\n                        </CardBody>\r\n                    </Card>\r\n                </Col>\r\n                {listDokter.length > 0 && (\r\n                    <Col xs={12} className=\"marginDas\" >\r\n                        <Card>\r\n                            <h4 style={{ marginTop: 20 }} className=\"text-center\"><b>List Dokter</b></h4>\r\n                            <CardBody className=\"text-center\">\r\n                                <Table bordered hover responsive>\r\n                                    <thead>\r\n                                        <tr>\r\n                                            <th>Dokter</th>\r\n                                            <th>Jam Mulai</th>\r\n                                            <th>Jam Selesai</th>\r\n                                        </tr>\r\n                                    </thead>\r\n                                    <tbody>\r\n                                        {listDokter.map((el, i) => {\r\n                                            return (\r\n                                                <tr key={i}>\r\n                                                    <td>{el.nama}</td>\r\n                                                    <td>{el.jadwalNow.jamMulai}</td>\r\n                                                    <td>{el.jadwalNow.jamSelesai}</td>\r\n                                                </tr>\r\n                                            )\r\n                                        })}\r\n                                    </tbody>\r\n                                </Table>\r\n                            </CardBody>\r\n                        </Card>\r\n                    </Col>\r\n                )}\r\n            </Row>\r\n\r\n        </Fragment>\r\n    )\r\n}\r\nexport default Dashboard\r\n","import React, { Fragment, useEffect, useState } from 'react';\r\nimport { Row, Card, CardBody, Col } from \"reactstrap\";\r\nimport { Colxx, Separator } from \"../../../components/common/CustomBootstrap\";\r\nimport Breadcrumb from \"../../../containers/navs/Breadcrumb\";\r\nimport mUser from '../../../Controler/c_User'\r\nimport Skeleton from 'react-loading-skeleton';\r\nimport DashboardAdmin from './DashboardAdmin'\r\nimport DashboardDokter from './DashboardDokter'\r\nimport DashboardPasien from './DashboardPasien'\r\n\r\n\r\nconst Dashboard = (props) => {\r\n  const authLogin = JSON.parse(localStorage.getItem('keminaAdmin'))\r\n  const [user, setUser] = useState({})\r\n  const [isLoad, setIsLoad] = useState(true)\r\n  useEffect(() => {\r\n    mUser.dataUser(authLogin.clientID, authLogin.token, authLogin.username, authLogin.jenisUser).then(resp => {\r\n      setUser(resp);\r\n    }).catch(err => {\r\n      console.error(err);\r\n    }).finally(() => setIsLoad(false))\r\n    return () => {\r\n\r\n    }\r\n  }, [isLoad, authLogin.clientID, authLogin.token, authLogin.username, authLogin.jenisUser])\r\n  const hakDashboard = () => {\r\n    if (user.jenisUser === \"pasien\") {\r\n      return <DashboardPasien authLogin={authLogin} />\r\n    } else if (user.jenisUser === \"dokter\") {\r\n      return <DashboardDokter authLogin={authLogin} />\r\n    } else if (user.jenisUser === \"admin\") {\r\n      return <DashboardAdmin authLogin={authLogin} />\r\n    } else {\r\n      return <p>You do not have access rights</p>\r\n    }\r\n  }\r\n  const loadingRow = [0, 1, 2]\r\n  return (\r\n    <Fragment>\r\n      <Row>\r\n        <Colxx xxs=\"12\">\r\n          <Breadcrumb heading=\"menu.dashboard\" match={props.match} />\r\n          <Separator className=\"mb-5\" />\r\n        </Colxx>\r\n      </Row>\r\n\r\n      <Row>\r\n        {isLoad ? (\r\n          <Col xs={12}>\r\n            {loadingRow.map(el => (\r\n              <Card key={el} style={{ marginTop: 5 }}>\r\n                <CardBody>\r\n                  <Skeleton height={100} />\r\n                </CardBody>\r\n              </Card>\r\n            ))}\r\n          </Col>\r\n        ) : (\r\n            <Col xs={12}>\r\n              {hakDashboard()}\r\n            </Col>\r\n          )}\r\n      </Row>\r\n    </Fragment>\r\n  )\r\n};\r\nexport default Dashboard;\r\n"],"sourceRoot":""}