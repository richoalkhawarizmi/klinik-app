{"version":3,"sources":["components/common/CustomBootstrap.js","Controler/c_User.js","components/DatatablePagination.js","Controler/c_StokTersedia.js","views/app/inventory/stokTersedia/StokTersedia.js","views/app/inventory/stokTersedia/index.js"],"names":["Colxx","props","widths","Separator","className","User","dataUser","clientID","token","username","jenisUser","Promise","resolve","reject","query","GQL","then","resp","errors","data","detailUser","catch","err","selectKlinikPasien","kodeklinik","namaklinik","updateLogin","simpanUser","selectKlinikAdmin","hapusUser","registerUser","nama","alamat","password","noHp","aktivasiUser","salt","forgetPassword","reqResetPassword","resetPassword","resetNewPassword","loginUser","updateProfil","DataTablePagination","getSafePage","bind","changePage","applyPage","pageClick","renderPages","changePageSize","renderPageJump","state","page","pageSize","defaultPageSize","Number","isNaN","this","Math","min","max","pages","size","onPageSizeChange","setState","onPageChange","e","preventDefault","pageIndex","pageCount","pageButtons","i","active","push","key","onClick","pageNumbers","canPrevious","canNext","pageSizeOptions","showPageSizeOptions","showPageJump","caret","color","direction","listClassName","aria-label","disabled","right","map","index","Component","Produk","cekStok","listDatas","el","kategori","kategoriProduk","kodekategori","kodeKategoriProduk","jenis","jenisProduk","kodejenis","kodeJenisProduk","simpanProduk","kodeProduk","harga","simpanKlinik","hapusProduk","loadSelecBox","listKategoriProduk","listJenisProduk","Admin","authLogin","JSON","parse","localStorage","getItem","useState","isReload","setIsReload","setcekStok","user","setUser","useEffect","mStok","klinik","console","error","finally","mUser","dataTableColumns","Header","accessor","Cell","value","Row","xxs","Breadcrumb","BreadcrumbItem","IntlMessages","id","Card","CardBody","columns","filterable","PaginationComponent","Gogo","match","fallback","exact","from","url","to","path","render"],"mappings":"yHAAA,iGAEMA,EAAQ,SAACC,GAAD,OACV,kBAAC,IAAD,iBAASA,EAAT,CAAgBC,OAAQ,CAAC,MAAO,KAAM,KAAM,KAAM,KAAM,KAAM,WAE5DC,EAAY,SAACF,GAAD,OACd,yBAAKG,UAAS,oBAAeH,EAAMG,e,iCCNvC,YAGMC,EAAO,CACZC,SAAU,SAACC,EAAUC,EAAOC,EAAUC,GACrC,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC5B,IAAMC,EAAK,8EAE6BL,EAF7B,wBAEqDC,EAFrD,gMAUXK,YAAID,EAAOP,EAAUC,GAAOQ,MAAK,SAAAC,GAChC,OAAIA,EAAKC,OAAgBL,EAAOI,EAAKC,QACjCD,EAAKE,MAAQF,EAAKE,KAAKC,WAAoBR,EAAQK,EAAKE,KAAKC,YACzDR,EAAQ,OACdS,OAAM,SAAAC,GACR,OAAQT,EAAOS,UAIlBC,mBAAoB,SAAChB,EAAUC,EAAOgB,EAAYC,EAAYhB,GAC7D,OAAO,IAAIE,SAAQ,SAACC,EAASC,GAC5B,IAAMC,EAAK,+DAEiBU,EAFjB,2BAE8CC,EAF9C,mDAGoBhB,EAHpB,2BAG+Ce,EAH/C,2BAG4EC,EAH5E,+BAMXV,YAAID,EAAOP,EAAUC,GAAOQ,MAAK,SAAAC,GAChC,OAAIA,EAAKC,OAAgBL,EAAOI,EAAKC,QACjCD,EAAKE,MAAQF,EAAKE,KAAKO,aAAeT,EAAKE,KAAKQ,WAAoBf,GAAQ,GACxEA,EAAQ,OACdS,OAAM,SAAAC,GACR,OAAQT,EAAOS,UAIlBM,kBAAmB,SAACrB,EAAUC,EAAOgB,EAAYC,GAChD,OAAO,IAAId,SAAQ,SAACC,EAASC,GAC5B,IAAMC,EAAK,+DAEiBU,EAFjB,2BAE8CC,EAF9C,+BAKXV,YAAID,EAAOP,EAAUC,GAAOQ,MAAK,SAAAC,GAChC,OAAIA,EAAKC,OAAgBL,EAAOI,EAAKC,QACjCD,EAAKE,MAAQF,EAAKE,KAAKO,YAAqBd,GAAQ,GAChDA,EAAQ,OACdS,OAAM,SAAAC,GACR,OAAQT,EAAOS,UAIlBO,UAAW,SAACtB,EAAUC,EAAOC,GAC5B,OAAO,IAAIE,SAAQ,SAACC,EAASC,GAC5B,IAAMC,EAAK,2DAEaL,EAFb,+BAKXM,YAAID,EAAOP,EAAUC,GAAOQ,MAAK,SAAAC,GAChC,OAAIA,EAAKC,OAAgBL,EAAOI,EAAKC,QACjCD,EAAKE,MAAQF,EAAKE,KAAKU,UAAmBjB,GAAQ,GAC9CA,EAAQ,OACdS,OAAM,SAAAC,GACR,OAAQT,EAAOS,UAIlBQ,aAAc,SAACrB,EAAUsB,EAAMC,EAAQC,EAAUC,GAChD,OAAO,IAAIvB,SAAQ,SAACC,EAASC,GAC5B,IAAMC,EAAK,gFAGGL,EAHH,oCAIGwB,EAJH,gCAKDF,EALC,gCAMDG,EANC,kCAOCF,EAPD,gCAUXjB,YAAID,GAAOE,MAAK,SAAAC,GACf,OAAIA,EAAKC,OAAgBL,EAAOI,EAAKC,QACjCD,EAAKE,MAAQF,EAAKE,KAAKW,aAAsBlB,GAAQ,GACjDA,EAAQ,OACdS,OAAM,SAAAC,GACR,OAAQT,EAAOS,UAIlBa,aAAc,SAAC1B,EAAU2B,GACxB,OAAO,IAAIzB,SAAQ,SAACC,EAASC,GAC5B,IAAMC,EAAK,6DAEeL,EAFf,qBAEoC2B,EAFpC,+BAKXrB,YAAID,GAAOE,MAAK,SAAAC,GACf,OAAIA,EAAKC,OAAgBL,EAAOI,EAAKC,QACjCD,EAAKE,MAAQF,EAAKE,KAAKgB,aAAsBvB,GAAQ,GACjDA,EAAQ,OACdS,OAAM,SAAAC,GACR,OAAQT,EAAOS,UAIlBe,eAAgB,SAAC5B,GAChB,OAAO,IAAIE,SAAQ,SAACC,EAASC,GAC5B,IAAMC,EAAK,iEAEmBL,EAFnB,+BAKXM,YAAID,GAAOE,MAAK,SAAAC,GACf,OAAIA,EAAKC,OAAgBL,EAAOI,EAAKC,QACjCD,EAAKE,MAAQF,EAAKE,KAAKmB,iBAA0B1B,GAAQ,GACrDA,EAAQ,OACdS,OAAM,SAAAC,GACR,OAAQT,EAAOS,UAIlBiB,cAAe,SAAC9B,EAAU2B,EAAMH,GAC/B,OAAO,IAAItB,SAAQ,SAACC,EAASC,GAC5B,IAAMC,EAAK,iEAEmBL,EAFnB,qBAEwC2B,EAFxC,wBAE4DH,EAF5D,+BAKXlB,YAAID,GAAOE,MAAK,SAAAC,GACf,OAAIA,EAAKC,OAAgBL,EAAOI,EAAKC,QACjCD,EAAKE,MAAQF,EAAKE,KAAKqB,iBAA0B5B,GAAQ,GACrDA,EAAQ,OACdS,OAAM,SAAAC,GACR,OAAQT,EAAOS,UAIlBmB,UAAW,SAAChC,EAAUwB,GACrB,OAAO,IAAItB,SAAQ,SAACC,EAASC,GAC5B,IAAMC,EAAK,uDAEYL,EAFZ,uBAEmCwB,EAFnC,2MAcXlB,YAAID,GAAOE,MAAK,SAAAC,GACf,OAAIA,EAAKC,OAAgBL,EAAOI,EAAKC,QACjCD,EAAKE,MAAQF,EAAKE,KAAKsB,UAAmB7B,EAAQK,EAAKE,KAAKsB,WACxD7B,EAAQ,OACdS,OAAM,SAAAC,GACR,OAAQT,EAAOS,UAIlBF,WAAY,SAACb,EAAUC,EAAOC,EAAUC,GACvC,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC5B,IAAMC,EAAK,8EAE6BL,EAF7B,wBAEqDC,EAFrD,mKAUXK,YAAID,EAAOP,EAAUC,GAAOQ,MAAK,SAAAC,GAChC,OAAIA,EAAKC,OAAgBL,EAAOI,EAAKC,QACjCD,EAAKE,MAAQF,EAAKE,KAAKC,WAAoBR,EAAQK,EAAKE,KAAKC,YACzDR,EAAQ,OACdS,OAAM,SAAAC,GACR,OAAQT,EAAOS,UAIlBoB,aAAc,SAACnC,EAAUC,EAAOC,EAAWsB,EAAMG,EAAMF,EAAQtB,EAAYc,EAAYC,GACtF,OAAO,IAAId,SAAQ,SAACC,EAASC,GAC5B,IAAMC,EAAK,kEAEoBL,EAFpB,oBAEwCsB,EAFxC,oBAEwDG,EAFxD,sBAE0EF,EAF1E,yBAEiGtB,EAFjG,2BAE6Hc,EAF7H,2BAE0JC,EAF1J,+BAKXV,YAAID,EAAOP,EAAUC,GAAOQ,MAAK,SAAAC,GAChC,OAAIA,EAAKC,OAAgBL,EAAOI,EAAKC,QACjCD,EAAKE,MAAQF,EAAKE,KAAKQ,WAAoBf,GAAQ,GAC/CA,EAAQ,OACdS,OAAM,SAAAC,GACR,OAAQT,EAAOS,WAMJjB,O,4MCzMMsC,E,YACnB,WAAY1C,GAAQ,IAAD,8BACjB,4CAAMA,KAED2C,YAAc,EAAKA,YAAYC,KAAjB,gBACnB,EAAKC,WAAa,EAAKA,WAAWD,KAAhB,gBAClB,EAAKE,UAAY,EAAKA,UAAUF,KAAf,gBACjB,EAAKG,UAAY,EAAKA,UAAUH,KAAf,gBACjB,EAAKI,YAAc,EAAKA,YAAYJ,KAAjB,gBACnB,EAAKK,eAAiB,EAAKA,eAAeL,KAApB,gBACtB,EAAKM,eAAiB,EAAKA,eAAeN,KAApB,gBAEtB,EAAKO,MAAQ,CACXC,KAAMpD,EAAMoD,KACZC,SAAU,EAAKrD,MAAMsD,iBAbN,E,yEAqBPF,GAIV,OAHIG,OAAOC,MAAMJ,KACfA,EAAOK,KAAKzD,MAAMoD,MAEbM,KAAKC,IAAID,KAAKE,IAAIR,EAAM,GAAIK,KAAKzD,MAAM6D,MAAQ,K,qCAGzCC,GACbL,KAAKzD,MAAM+D,iBAAiBD,GAC5BL,KAAKO,SAAS,CAAEX,SAAUS,M,iCAGjBV,GACTA,EAAOK,KAAKd,YAAYS,GACxBK,KAAKO,SAAS,CAAEZ,SACZK,KAAKzD,MAAMoD,OAASA,GACtBK,KAAKzD,MAAMiE,aAAab,K,gCAIlBc,GACJA,GACFA,EAAEC,iBAEJ,IAAMf,EAAOK,KAAKN,MAAMC,KACxBK,KAAKZ,WAAoB,KAATO,EAAcK,KAAKzD,MAAMoD,KAAOA,K,gCAGxCgB,GACRX,KAAKZ,WAAWuB,K,oCAMhB,IAHa,IAAD,OACRC,EAAYZ,KAAKzD,MAAM6D,MACvBS,EAAc,GAFN,WAGHC,GACP,IAAIC,EAAS,EAAKrB,MAAMC,OAASmB,EACjCD,EAAYG,KACV,kBAAC,IAAD,CAAgBC,IAAKH,EAAGC,OAAQA,GAC9B,kBAAC,IAAD,CACEG,QAAS,kBAAM,EAAK5B,UAAUwB,KAC9BA,EAAI,MANHA,EAAI,EAAGA,EAAIF,EAAWE,IAAM,EAA5BA,GAUT,OAAOD,I,uCAMP,IAHgB,IAAD,OACXT,EAAQJ,KAAKzD,MAAM6D,MACnBe,EAAc,GAFH,WAGNL,GACPK,EAAYH,KACV,kBAAC,IAAD,CACEC,IAAKH,EACLI,QAAS,kBAAM,EAAK9B,WAAW0B,KAE9BA,EAAI,KANFA,EAAI,EAAGA,EAAIV,EAAOU,IAAM,EAAxBA,GAUT,OAAOK,I,+BAGC,IAAD,SASHnB,KAAKzD,MAPPoD,EAFK,EAELA,KACAS,EAHK,EAGLA,MACAgB,EAJK,EAILA,YACAC,EALK,EAKLA,QACAC,EANK,EAMLA,gBACAC,EAPK,EAOLA,oBACAC,EARK,EAQLA,aAGF,OACE,kBAAC,WAAD,KACE,yBAAK9E,UAAU,eAEX8E,GACA,yBAAK9E,UAAU,mBAAkB,uCAC/B,kBAAC,IAAD,CAAsBA,UAAU,kBAC9B,kBAAC,IAAD,CAAgB+E,OAAK,EAACC,MAAM,kBAAkBrB,KAAK,MAChDL,KAAKN,MAAMC,KAAO,GAErB,kBAAC,IAAD,CAAcgC,UAAU,QACrB3B,KAAKP,mBAGV,sCAAkBW,GAGtB,kBAAC,IAAD,CAAY1D,UAAU,iBAAiB2D,KAAK,KAAKuB,cAAc,yBAAyBC,aAAW,2BACjG,kBAAC,IAAD,CAAgBnF,UAAS,WAAM0E,GAAe,aAC5C,kBAAC,IAAD,CACE1E,UAAW,OACXwE,QAAS,WACFE,GACL,EAAKhC,WAAWO,EAAO,IAEzBmC,UAAWV,GACX,uBAAG1E,UAAU,6BAIhBsD,KAAKT,cACN,kBAAC,IAAD,CAAgB7C,UAAS,WAAM2E,GAAW,aACxC,kBAAC,IAAD,CACE3E,UAAU,OACVwE,QAAS,WACFG,GACL,EAAKjC,WAAWO,EAAO,IAEzBmC,UAAWT,GACX,uBAAG3E,UAAU,+BAKjB6E,GACA,yBAAK7E,UAAU,oBACb,0BAAMA,UAAU,8BAAhB,UACA,kBAAC,IAAD,CAAsBA,UAAU,kBAC9B,kBAAC,IAAD,CAAgB+E,OAAK,EAACC,MAAM,kBAAkBrB,KAAK,MAChDL,KAAKN,MAAME,UAEd,kBAAC,IAAD,CAAcmC,OAAK,GAChBT,EAAgBU,KAAI,SAAC3B,EAAM4B,GAC1B,OACE,kBAAC,IAAD,CACEhB,IAAKgB,EACLf,QAAS,kBAAM,EAAK1B,eAAea,KAElCA,c,gDAzIS9D,EAAOmD,GACrC,MAAO,CAACC,KAAMpD,EAAMoD,U,GAnByBuC,c,qKCmHlCC,EAtHA,CACXC,QAAS,SAACvF,EAAUC,EAAOgB,GACvB,OAAO,IAAIb,SAAQ,SAACC,EAASC,GACzB,IAAMC,EAAK,4EAEmBU,EAFnB,8dAmBXT,YAAID,EAAOP,EAAUC,GAAOQ,MAAK,SAAAC,GAC7B,IAAM8E,EAAY,GAqBlB,OApBA9E,EAAKE,KAAK2E,QAAQJ,KAAI,SAAAM,GAElB,GAAIA,EAAGC,SACH,IAAIA,EAAWD,EAAGC,SAASC,eACvBC,EAAeH,EAAGC,SAASG,mBAGnC,GAAIJ,EAAGK,MACH,IAAIA,EAAQL,EAAGK,MAAMC,YACjBC,EAAYP,EAAGK,MAAMG,gBAG7B,OAAOT,EAAUrB,KAAV,eACAsB,EADA,CAEHG,eACAF,WACAM,YACAF,cAGJpF,EAAKC,OAAgBL,EAAOI,EAAKC,QACjCD,EAAKE,MAAQF,EAAKE,KAAK2E,QAAiBlF,EAAQmF,GAC5CnF,EAAQ,OACjBS,OAAM,SAAAC,GACL,OAAQT,EAAOS,UAI3BmF,aAAc,SAAClG,EAAUC,EAAOgB,EAAYkF,EAAYb,EAAQQ,EAAOJ,EAAUU,GAC7E,OAAO,IAAIhG,SAAQ,SAACC,EAASC,GACzB,IAAMC,EAAK,2GAGYU,EAHZ,gDAIYkF,EAJZ,gDAKYb,EALZ,8CAMUI,EANV,2CAOOI,EAPP,0CAQMM,EARN,kDAYX5F,YAAID,EAAOP,EAAUC,GAAOQ,MAAK,SAAAC,GAC7B,OAAIA,EAAKC,OAAgBL,EAAOI,EAAKC,QACjCD,EAAKE,MAAQF,EAAKE,KAAKyF,aAAsBhG,EAAQK,EAAKE,KAAKyF,cAC3DhG,EAAQ,OACjBS,OAAM,SAAAC,GACL,OAAQT,EAAOS,UAI3BuF,YAAa,SAACtG,EAAUC,EAAOgB,EAAYkF,GACvC,OAAO,IAAI/F,SAAQ,SAACC,EAASC,GACzB,IAAMC,EAAK,sEAEmB4F,EAFnB,0BAE+ClF,EAF/C,+BAKXT,YAAID,EAAOP,EAAUC,GAAOQ,MAAK,SAAAC,GAC7B,OAAIA,EAAKC,OAAgBL,EAAOI,EAAKC,QACjCD,EAAKE,MAAQF,EAAKE,KAAK0F,YAAqBjG,GAAQ,GAChDA,EAAQ,OACjBS,OAAM,SAAAC,GACL,OAAQT,EAAOS,UAI3BwF,aAAc,SAACvG,EAAUC,EAAOgB,GAC5B,OAAO,IAAIb,SAAQ,SAACC,EAASC,GACzB,IAAMC,EAAK,wFAE8BU,EAF9B,+KAM6BA,EAN7B,+IAYXT,YAAID,EAAOP,EAAUC,GAAOQ,MAAK,SAAAC,GAC7B,GAAIA,EAAKC,OAAQ,OAAQL,EAAOI,EAAKC,QACrC,IAAM+E,EAAWhF,EAAKE,KAAK4F,mBACrBV,EAAQpF,EAAKE,KAAK6F,gBACxB,OAAI/F,EAAKE,MAAQF,EAAKE,KAAK4F,mBAA4BnG,EAAQ,CAAEqF,WAAUI,UACnEzF,EAAQ,OACjBS,OAAM,SAAAC,GACL,OAAQT,EAAOS,W,6CCkDhB2F,EAtJD,SAAChH,GACX,IAAMiH,EAAYC,KAAKC,MAAMC,aAAaC,QAAQ,gBAD7B,EAEWC,oBAAS,GAFpB,mBAEdC,EAFc,KAEJC,EAFI,OAGSF,mBAAS,IAHlB,mBAGdzB,EAHc,KAGL4B,EAHK,OAIGH,mBAAS,IAJZ,mBAIdI,EAJc,KAIRC,EAJQ,KASrBC,qBAAU,WAMN,OALAC,EAAMhC,QAAQoB,EAAU3G,SAAU2G,EAAU1G,MAAO0G,EAAUa,OAAOvG,YAAYR,MAAK,SAAAC,GACjFyG,EAAWzG,MACZI,OAAM,SAAAC,GACL0G,QAAQC,MAAM3G,MACf4G,SAAQ,kBAAMT,GAAY,MACtB,eACR,CAACP,EAAU3G,SAAU2G,EAAU1G,MAAO0G,EAAUzG,SAAUyG,EAAUa,OAAOvG,WAAYgG,IAC1FK,qBAAU,WAMN,OALAM,IAAM7H,SAAS4G,EAAU3G,SAAU2G,EAAU1G,MAAO0G,EAAUzG,SAAUyG,EAAUxG,WAAWM,MAAK,SAAAC,GAC9F2G,EAAQ3G,MACTI,OAAM,SAAAC,GACL0G,QAAQC,MAAM3G,MAEX,eAGR,CAAC4F,EAAU3G,SAAU2G,EAAU1G,MAAO0G,EAAUzG,SAAUyG,EAAUxG,YAiCvE,IAAM0H,EAAmB,CACrB,CACIC,OAAQ,cACRC,SAAU,aACVC,KAAM,SAAAtI,GAAK,OAAI,uBAAGG,UAAU,qBAAqBoH,EAAW,kBAAC,IAAD,MAAevH,EAAMuI,SAErF,CACIH,OAAQ,cACRC,SAAU,aACVC,KAAM,SAAAtI,GAAK,OAAI,uBAAGG,UAAU,qBAAqBoH,EAAW,kBAAC,IAAD,MAAevH,EAAMuI,SAErF,CACIH,OAAQ,WACRC,SAAU,WACVC,KAAM,SAAAtI,GAAK,OAAI,uBAAGG,UAAU,qBAAqBoH,EAAW,kBAAC,IAAD,MAAevH,EAAMuI,SAErF,CACIH,OAAQ,QACRC,SAAU,QACVC,KAAM,SAAAtI,GAAK,OAAI,uBAAGG,UAAU,qBAAqBoH,EAAW,kBAAC,IAAD,MAAevH,EAAMuI,SAErF,CACIH,OAAQ,QACRC,SAAU,QACVC,KAAM,SAAAtI,GAAK,OAAI,uBAAGG,UAAU,qBAAqBoH,EAAW,kBAAC,IAAD,MAAevH,EAAMuI,SAErF,CACIH,OAAQ,SACRC,SAAU,SACVC,KAAM,SAAAtI,GAAK,OAAI,uBAAGG,UAAU,qBAAqBoH,EAAW,kBAAC,IAAD,MAAevH,EAAMuI,SAErF,CACIH,OAAQ,MACRC,SAAU,UACVC,KAAM,SAAAtI,GAAK,OAAI,uBAAGG,UAAU,qBAAqBoH,EAAW,kBAAC,IAAD,MAAevH,EAAMuI,UAGzF,MAAuB,UAAnBb,EAAKjH,UAED,kBAAC,WAAD,KACI,kBAAC+H,EAAA,EAAD,KACI,kBAAC,IAAD,CAAOC,IAAI,MACP,yBAAKtI,UAAU,QACX,yCAGA,kBAACuI,EAAA,EAAD,CAAYvI,UAAU,iEAClB,kBAACwI,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAcC,GAAG,0BAM7B,kBAAC,IAAD,CAAW1I,UAAU,WAG7B,kBAACqI,EAAA,EAAD,KACI,kBAAC,IAAD,CAAOC,IAAI,KAAKtI,UAAU,QACtB,kBAAC,IAAD,CAAoB0I,GAAG,WACnB,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAAC,IAAD,CACI7H,KAAM2E,EACNmD,QAASb,EACT7E,gBAAiB,EACjB2F,YAAY,EACZhE,cAAc,EACdiE,oBAAqBxG,IACrBsC,qBAAqB,UAkBjD,6DChJGmE,UAZF,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAH,OACX,kBAAC,WAAD,CAAUC,SAAU,yBAAKlJ,UAAU,aACjC,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAUmJ,OAAK,EAACC,KAAI,UAAKH,EAAMI,IAAX,UAAwBC,GAAE,UAAKL,EAAMI,IAAX,YAC9C,kBAAC,IAAD,CACEE,KAAI,UAAKN,EAAMI,KACfG,OAAQ,SAAA3J,GAAK,OAAI,kBAAC,EAAWA,MAE/B,kBAAC,IAAD,CAAUyJ,GAAG","file":"static/js/47.33ead2eb.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Col } from 'reactstrap';\r\nconst Colxx = (props) => (\r\n    <Col {...props} widths={['xxs', 'xs', 'sm', 'md', 'lg', 'xl', 'xxl']} />\r\n);\r\nconst Separator = (props) => (\r\n    <div className={`separator ${props.className}`}></div>\r\n);\r\nexport { Colxx,Separator }","import GQL from '../helpers/GQL'\r\n\r\n\r\nconst User = {\r\n\tdataUser: (clientID, token, username, jenisUser) => {\r\n\t\treturn new Promise((resolve, reject) => {\r\n\t\t\tconst query = `\r\n                query {\r\n                    detailUser(username:\"${username}\",jenisUser:\"${jenisUser}\"){\r\n                        superadmin\r\n                        nama\r\n                        noHp\r\n                        jenisUser\r\n                  }\r\n                }\r\n            `\r\n\t\t\tGQL(query, clientID, token).then(resp => {\r\n\t\t\t\tif (resp.errors) return (reject(resp.errors));;\r\n\t\t\t\tif (resp.data && resp.data.detailUser) return (resolve(resp.data.detailUser));\r\n\t\t\t\treturn (resolve([]))\r\n\t\t\t}).catch(err => {\r\n\t\t\t\treturn (reject(err));\r\n\t\t\t})\r\n\t\t})\r\n\t},\r\n\tselectKlinikPasien: (clientID, token, kodeklinik, namaklinik, username) => {\r\n\t\treturn new Promise((resolve, reject) => {\r\n\t\t\tconst query = `\r\n\t\t\tmutation {\r\n\t\t\t\tupdateLogin(kodeklinik: \"${kodeklinik}\", namaklinik: \"${namaklinik}\")\r\n\t\t\t\tsimpanUser(input:{username:\"${username}\"}, kodeklinik:\"${kodeklinik}\", namaklinik: \"${namaklinik}\")\r\n\t\t\t  }\r\n            `\r\n\t\t\tGQL(query, clientID, token).then(resp => {\r\n\t\t\t\tif (resp.errors) return (reject(resp.errors));\r\n\t\t\t\tif (resp.data && resp.data.updateLogin && resp.data.simpanUser) return (resolve(true));\r\n\t\t\t\treturn (resolve([]))\r\n\t\t\t}).catch(err => {\r\n\t\t\t\treturn (reject(err));\r\n\t\t\t})\r\n\t\t})\r\n\t},\r\n\tselectKlinikAdmin: (clientID, token, kodeklinik, namaklinik) => {\r\n\t\treturn new Promise((resolve, reject) => {\r\n\t\t\tconst query = `\r\n\t\t\tmutation {\r\n\t\t\t\tupdateLogin(kodeklinik: \"${kodeklinik}\", namaklinik: \"${namaklinik}\")\r\n\t\t\t  }\r\n            `\r\n\t\t\tGQL(query, clientID, token).then(resp => {\r\n\t\t\t\tif (resp.errors) return (reject(resp.errors));\r\n\t\t\t\tif (resp.data && resp.data.updateLogin) return (resolve(true));\r\n\t\t\t\treturn (resolve([]))\r\n\t\t\t}).catch(err => {\r\n\t\t\t\treturn (reject(err));\r\n\t\t\t})\r\n\t\t})\r\n\t},\r\n\thapusUser: (clientID, token, username) => {\r\n\t\treturn new Promise((resolve, reject) => {\r\n\t\t\tconst query = `\r\n\t\t\tmutation {\r\n\t\t\t\thapusUser(username: \"${username}\")\r\n\t\t\t  }\r\n            `\r\n\t\t\tGQL(query, clientID, token).then(resp => {\r\n\t\t\t\tif (resp.errors) return (reject(resp.errors));\r\n\t\t\t\tif (resp.data && resp.data.hapusUser) return (resolve(true));\r\n\t\t\t\treturn (resolve([]))\r\n\t\t\t}).catch(err => {\r\n\t\t\t\treturn (reject(err));\r\n\t\t\t})\r\n\t\t})\r\n\t},\r\n\tregisterUser: (username, nama, alamat, password, noHp) => {\r\n\t\treturn new Promise((resolve, reject) => {\r\n\t\t\tconst query = `\r\n\t\t\tmutation {\r\n\t\t\t\tregisterUser(input:{\r\n\t\t\t\t\tusername:\"${username}\", \r\n\t\t\t\t\tpassword:\"${password}\", \r\n\t\t\t\t\tnama:\"${nama}\", \r\n\t\t\t\t\tnoHp:\"${noHp}\", \r\n\t\t\t\t\talamat:\"${alamat}\"})\r\n\t\t\t  }\r\n            `\r\n\t\t\tGQL(query).then(resp => {\r\n\t\t\t\tif (resp.errors) return (reject(resp.errors));\r\n\t\t\t\tif (resp.data && resp.data.registerUser) return (resolve(true));\r\n\t\t\t\treturn (resolve([]))\r\n\t\t\t}).catch(err => {\r\n\t\t\t\treturn (reject(err));\r\n\t\t\t})\r\n\t\t})\r\n\t},\r\n\taktivasiUser: (username, salt) => {\r\n\t\treturn new Promise((resolve, reject) => {\r\n\t\t\tconst query = `\r\n\t\t\tmutation {\r\n\t\t\t\taktivasiUser(username:\"${username}\", salt: \"${salt}\")\r\n\t\t\t  }\r\n            `\r\n\t\t\tGQL(query).then(resp => {\r\n\t\t\t\tif (resp.errors) return (reject(resp.errors));\r\n\t\t\t\tif (resp.data && resp.data.aktivasiUser) return (resolve(true));\r\n\t\t\t\treturn (resolve([]))\r\n\t\t\t}).catch(err => {\r\n\t\t\t\treturn (reject(err));\r\n\t\t\t})\r\n\t\t})\r\n\t},\r\n\tforgetPassword: (username) => {\r\n\t\treturn new Promise((resolve, reject) => {\r\n\t\t\tconst query = `\r\n\t\t\tmutation {\r\n\t\t\t\treqResetPassword(username:\"${username}\")\r\n\t\t\t  }\r\n            `\r\n\t\t\tGQL(query).then(resp => {\r\n\t\t\t\tif (resp.errors) return (reject(resp.errors));\r\n\t\t\t\tif (resp.data && resp.data.reqResetPassword) return (resolve(true));\r\n\t\t\t\treturn (resolve([]))\r\n\t\t\t}).catch(err => {\r\n\t\t\t\treturn (reject(err));\r\n\t\t\t})\r\n\t\t})\r\n\t},\r\n\tresetPassword: (username, salt, password) => {\r\n\t\treturn new Promise((resolve, reject) => {\r\n\t\t\tconst query = `\r\n\t\t\tmutation {\r\n\t\t\t\tresetNewPassword(username:\"${username}\", salt: \"${salt}\", password:\"${password}\")\r\n\t\t\t  }\r\n            `\r\n\t\t\tGQL(query).then(resp => {\r\n\t\t\t\tif (resp.errors) return (reject(resp.errors));\r\n\t\t\t\tif (resp.data && resp.data.resetNewPassword) return (resolve(true));\r\n\t\t\t\treturn (resolve([]))\r\n\t\t\t}).catch(err => {\r\n\t\t\t\treturn (reject(err));\r\n\t\t\t})\r\n\t\t})\r\n\t},\r\n\tloginUser: (username, password) => {\r\n\t\treturn new Promise((resolve, reject) => {\r\n\t\t\tconst query = `\r\n\t\t\tquery {\r\n\t\t\t\tloginUser(username:\"${username}\",password:\"${password}\"){\r\n\t\t\t\t\tclientID\r\n\t\t\t\t\ttoken\r\n\t\t\t\t\tsuperadmin\r\n\t\t\t\t\tjenisUser\r\n\t\t\t\t\tklinik{\r\n\t\t\t\t\t\tkodeklinik\r\n\t\t\t\t\t\tnamaklinik\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t  }\r\n            `\r\n\t\t\tGQL(query).then(resp => {\r\n\t\t\t\tif (resp.errors) return (reject(resp.errors));\r\n\t\t\t\tif (resp.data && resp.data.loginUser) return (resolve(resp.data.loginUser));\r\n\t\t\t\treturn (resolve([]))\r\n\t\t\t}).catch(err => {\r\n\t\t\t\treturn (reject(err));\r\n\t\t\t})\r\n\t\t})\r\n\t},\r\n\tdetailUser: (clientID, token, username, jenisUser) => {\r\n\t\treturn new Promise((resolve, reject) => {\r\n\t\t\tconst query = `\r\n                query {\r\n                    detailUser(username:\"${username}\",jenisUser:\"${jenisUser}\"){\r\n                        username\r\n                        nama\r\n\t\t\t\t\t\tnoHp\r\n\t\t\t\t\t\talamat\r\n                  }\r\n                }\r\n            `\r\n\t\t\tGQL(query, clientID, token).then(resp => {\r\n\t\t\t\tif (resp.errors) return (reject(resp.errors));;\r\n\t\t\t\tif (resp.data && resp.data.detailUser) return (resolve(resp.data.detailUser));\r\n\t\t\t\treturn (resolve([]))\r\n\t\t\t}).catch(err => {\r\n\t\t\t\treturn (reject(err));\r\n\t\t\t})\r\n\t\t})\r\n\t},\r\n\tupdateProfil: (clientID, token, username,  nama, noHp, alamat, jenisUser,  kodeklinik, namaklinik) => {\r\n\t\treturn new Promise((resolve, reject) => {\r\n\t\t\tconst query = `\r\n\t\t\tmutation {\r\n\t\t\t\tsimpanUser(input:{username:\"${username}\", nama:\"${nama}\", noHp:\"${noHp}\", alamat:\"${alamat}\", jenisUser:\"${jenisUser}\"},kodeklinik: \"${kodeklinik}\", namaklinik: \"${namaklinik}\")\r\n\t\t\t  }\r\n            `\r\n\t\t\tGQL(query, clientID, token).then(resp => {\r\n\t\t\t\tif (resp.errors) return (reject(resp.errors));\r\n\t\t\t\tif (resp.data && resp.data.simpanUser) return (resolve(true));\r\n\t\t\t\treturn (resolve([]))\r\n\t\t\t}).catch(err => {\r\n\t\t\t\treturn (reject(err));\r\n\t\t\t})\r\n\t\t})\r\n\t},\r\n};\r\n\r\nexport default User;\r\n","import React, { Component, Fragment } from \"react\";\r\nimport {\r\n  Pagination, PaginationItem, PaginationLink,\r\n  UncontrolledDropdown, DropdownMenu, DropdownToggle, DropdownItem\r\n} from \"reactstrap\";\r\n\r\nexport default class DataTablePagination extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.getSafePage = this.getSafePage.bind(this);\r\n    this.changePage = this.changePage.bind(this);\r\n    this.applyPage = this.applyPage.bind(this);\r\n    this.pageClick = this.pageClick.bind(this);\r\n    this.renderPages = this.renderPages.bind(this);\r\n    this.changePageSize = this.changePageSize.bind(this);\r\n    this.renderPageJump = this.renderPageJump.bind(this);\r\n\r\n    this.state = {\r\n      page: props.page,\r\n      pageSize: this.props.defaultPageSize\r\n    };\r\n  }\r\n\r\n  static getDerivedStateFromProps(props, state) {\r\n    return {page: props.page};\r\n  }\r\n\r\n  getSafePage(page) {\r\n    if (Number.isNaN(page)) {\r\n      page = this.props.page;\r\n    }\r\n    return Math.min(Math.max(page, 0), this.props.pages - 1);\r\n  }\r\n\r\n  changePageSize(size) {\r\n    this.props.onPageSizeChange(size);\r\n    this.setState({ pageSize: size });\r\n  }\r\n\r\n  changePage(page) {\r\n    page = this.getSafePage(page);\r\n    this.setState({ page });\r\n    if (this.props.page !== page) {\r\n      this.props.onPageChange(page);\r\n    }\r\n  }\r\n\r\n  applyPage(e) {\r\n    if (e) {\r\n      e.preventDefault();\r\n    }\r\n    const page = this.state.page;\r\n    this.changePage(page === \"\" ? this.props.page : page);\r\n  }\r\n\r\n  pageClick(pageIndex) {\r\n    this.changePage(pageIndex);\r\n  }\r\n\r\n  renderPages() {\r\n    let pageCount = this.props.pages;\r\n    let pageButtons = [];\r\n    for (let i = 0; i < pageCount; i++) {\r\n      let active = this.state.page === i ? true : false;\r\n      pageButtons.push(\r\n        <PaginationItem key={i} active={active}>\r\n          <PaginationLink\r\n            onClick={() => this.pageClick(i)}\r\n          >{i + 1}</PaginationLink>\r\n        </PaginationItem>\r\n      );\r\n    }\r\n    return pageButtons;\r\n  }\r\n\r\n  renderPageJump() {\r\n    let pages = this.props.pages;\r\n    let pageNumbers = [];\r\n    for (let i = 0; i < pages; i++) {\r\n      pageNumbers.push(\r\n        <DropdownItem\r\n          key={i}\r\n          onClick={() => this.changePage(i)}\r\n        >\r\n          {i + 1}\r\n        </DropdownItem>\r\n      );\r\n    }\r\n    return pageNumbers;\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      page,\r\n      pages,\r\n      canPrevious,\r\n      canNext,\r\n      pageSizeOptions,\r\n      showPageSizeOptions,\r\n      showPageJump\r\n    } = this.props;\r\n\r\n    return (\r\n      <Fragment>\r\n        <div className=\"text-center\">\r\n          {\r\n            showPageJump &&\r\n            <div className=\"float-left pt-2\"><span>Page </span>\r\n              <UncontrolledDropdown className=\"d-inline-block\">\r\n                <DropdownToggle caret color=\"outline-primary\" size=\"xs\">\r\n                  {this.state.page + 1}\r\n                </DropdownToggle>\r\n                <DropdownMenu direction=\"left\" >\r\n                  {this.renderPageJump()}\r\n                </DropdownMenu>\r\n              </UncontrolledDropdown>\r\n              <span> of </span>{pages}</div>\r\n          }\r\n\r\n          <Pagination className=\"d-inline-block\" size=\"sm\" listClassName=\"justify-content-center\" aria-label=\"Page navigation example\">\r\n            <PaginationItem className={`${!canPrevious && \"disabled\"}`}>\r\n              <PaginationLink\r\n                className={\"prev\"}\r\n                onClick={() => {\r\n                  if (!canPrevious) return;\r\n                  this.changePage(page - 1);\r\n                }}\r\n                disabled={!canPrevious}>\r\n                <i className=\"simple-icon-arrow-left\" />\r\n              </PaginationLink>\r\n            </PaginationItem>\r\n\r\n            {this.renderPages()}\r\n            <PaginationItem className={`${!canNext && \"disabled\"}`}>\r\n              <PaginationLink\r\n                className=\"next\"\r\n                onClick={() => {\r\n                  if (!canNext) return;\r\n                  this.changePage(page + 1);\r\n                }}\r\n                disabled={!canNext}>\r\n                <i className=\"simple-icon-arrow-right\" />\r\n              </PaginationLink>\r\n            </PaginationItem>\r\n          </Pagination>\r\n          {\r\n            showPageSizeOptions &&\r\n            <div className=\"float-right pt-2\">\r\n              <span className=\"text-muted text-small mr-1\">Items </span>\r\n              <UncontrolledDropdown className=\"d-inline-block\">\r\n                <DropdownToggle caret color=\"outline-primary\" size=\"xs\">\r\n                  {this.state.pageSize}\r\n                </DropdownToggle>\r\n                <DropdownMenu right>\r\n                  {pageSizeOptions.map((size, index) => {\r\n                    return (\r\n                      <DropdownItem\r\n                        key={index}\r\n                        onClick={() => this.changePageSize(size)}\r\n                      >\r\n                        {size}\r\n                      </DropdownItem>\r\n                    );\r\n                  })}\r\n                </DropdownMenu>\r\n              </UncontrolledDropdown>\r\n            </div>\r\n          }\r\n        </div>\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n","import GQL from '../helpers/GQL'\r\n\r\n\r\nconst Produk = {\r\n    cekStok: (clientID, token, kodeklinik) => {\r\n        return new Promise((resolve, reject) => {\r\n            const query = `\r\n                query{\r\n                    cekStok(kodeklinik:\"${kodeklinik}\"){\r\n                    kodeProduk\r\n                    namaProduk\r\n                    kategori{\r\n                        kodeKategoriProduk\r\n                        kategoriProduk\r\n                    }\r\n                    jenis{\r\n                        kodeJenisProduk\r\n                        jenisProduk\r\n                    }\r\n                    harga\r\n                    satuan\r\n                    stokQty\r\n                    }\r\n                }\r\n            `\r\n            GQL(query, clientID, token).then(resp => {\r\n                const listDatas = []\r\n                resp.data.cekStok.map(el => {\r\n                    // console.log(el)\r\n                    if (el.kategori) {\r\n                        var kategori = el.kategori.kategoriProduk\r\n                        var kodekategori = el.kategori.kodeKategoriProduk\r\n                    }\r\n\r\n                    if (el.jenis) {\r\n                        var jenis = el.jenis.jenisProduk\r\n                        var kodejenis = el.jenis.kodeJenisProduk\r\n                    }\r\n\r\n                    return listDatas.push({\r\n                        ...el,\r\n                        kodekategori,\r\n                        kategori,\r\n                        kodejenis,\r\n                        jenis,\r\n                    })\r\n                })\r\n                if (resp.errors) return (reject(resp.errors));;\r\n                if (resp.data && resp.data.cekStok) return (resolve(listDatas));\r\n                return (resolve([]))\r\n            }).catch(err => {\r\n                return (reject(err));\r\n            })\r\n        })\r\n    },\r\n    simpanProduk: (clientID, token, kodeklinik, kodeProduk, Produk, jenis, kategori, harga) => {\r\n        return new Promise((resolve, reject) => {\r\n            const query = `\r\n            mutation {\r\n                simpanProduk(input:{\r\n                    kodeklinik: \"${kodeklinik}\",\r\n                    kodeProduk: \"${kodeProduk}\",\r\n                    namaProduk: \"${Produk}\",\r\n                    kategori: \"${kategori}\",\r\n                    jenis: \"${jenis}\",\r\n                    harga: ${harga},\r\n                })\r\n            }\r\n        `\r\n            GQL(query, clientID, token).then(resp => {\r\n                if (resp.errors) return (reject(resp.errors));;\r\n                if (resp.data && resp.data.simpanKlinik) return (resolve(resp.data.simpanKlinik));\r\n                return (resolve([]))\r\n            }).catch(err => {\r\n                return (reject(err));\r\n            })\r\n        })\r\n    },\r\n    hapusProduk: (clientID, token, kodeklinik, kodeProduk) => {\r\n        return new Promise((resolve, reject) => {\r\n            const query = `\r\n\t\t\tmutation {\r\n                hapusProduk(kodeProduk:\"${kodeProduk}\", kodeklinik:\"${kodeklinik}\")\r\n\t\t\t  }\r\n            `\r\n            GQL(query, clientID, token).then(resp => {\r\n                if (resp.errors) return (reject(resp.errors));\r\n                if (resp.data && resp.data.hapusProduk) return (resolve(true));\r\n                return (resolve([]))\r\n            }).catch(err => {\r\n                return (reject(err));\r\n            })\r\n        })\r\n    },\r\n    loadSelecBox: (clientID, token, kodeklinik) => {\r\n        return new Promise((resolve, reject) => {\r\n            const query = `\r\n                query {\r\n                    listKategoriProduk(kodeklinik:\"${kodeklinik}\"){\r\n                        kodeKategoriProduk\r\n                        kategoriProduk\r\n                      }\r\n                      listJenisProduk(kodeklinik:\"${kodeklinik}\"){\r\n                        kodeJenisProduk\r\n                        jenisProduk\r\n                      }\r\n                }\r\n            `\r\n            GQL(query, clientID, token).then(resp => {\r\n                if (resp.errors) return (reject(resp.errors));;\r\n                const kategori = resp.data.listKategoriProduk\r\n                const jenis = resp.data.listJenisProduk\r\n                if (resp.data && resp.data.listKategoriProduk) return (resolve({ kategori, jenis }));\r\n                return (resolve([]))\r\n            }).catch(err => {\r\n                return (reject(err));\r\n            })\r\n        })\r\n    },\r\n};\r\n\r\nexport default Produk;\r\n","import React, { Fragment, useEffect, useState } from \"react\"\r\nimport { Row, Card, CardBody, Breadcrumb, BreadcrumbItem } from \"reactstrap\"\r\nimport { Colxx, Separator } from \"../../../../components/common/CustomBootstrap\"\r\nimport { ContextMenuTrigger } from \"react-contextmenu\"\r\nimport mUser from '../../../../Controler/c_User'\r\nimport mStok from '../../../../Controler/c_StokTersedia'\r\nimport Skeleton from 'react-loading-skeleton'\r\n// import ModalProduk from './Modal.StokTersedia'\r\n// import Notifikasi from '../../../../helpers/Notifikasi'\r\n// import Confirm from '../../../../helpers/Confirm'\r\nimport IntlMessages from \"../../../../helpers/IntlMessages\"\r\nimport DataTablePagination from \"../../../../components/DatatablePagination\"\r\n// import { isArray } from \"util\";\r\nimport ReactTable from \"react-table\"\r\n\r\nconst Admin = (props) => {\r\n    const authLogin = JSON.parse(localStorage.getItem('keminaAdmin'))\r\n    const [isReload, setIsReload] = useState(true)\r\n    const [cekStok, setcekStok] = useState([])\r\n    const [user, setUser] = useState({})\r\n   // const [detailProduk, setDetailProduk] = useState({})\r\n    // const [isConfirm, setIsConfirm] = useState(false)\r\n    // const [textConfirm, setTextConfirm] = useState(\"\")\r\n    //const [isModal, setIsModal] = useState(false)\r\n    useEffect(() => {\r\n        mStok.cekStok(authLogin.clientID, authLogin.token, authLogin.klinik.kodeklinik).then(resp => {\r\n            setcekStok(resp);\r\n        }).catch(err => {\r\n            console.error(err);\r\n        }).finally(() => setIsReload(false));\r\n        return () => { };\r\n    }, [authLogin.clientID, authLogin.token, authLogin.username, authLogin.klinik.kodeklinik, isReload]);\r\n    useEffect(() => {\r\n        mUser.dataUser(authLogin.clientID, authLogin.token, authLogin.username, authLogin.jenisUser).then(resp => {\r\n            setUser(resp);\r\n        }).catch(err => {\r\n            console.error(err);\r\n        })\r\n        return () => {\r\n\r\n        }\r\n    }, [authLogin.clientID, authLogin.token, authLogin.username, authLogin.jenisUser])\r\n    // const handleAdd = () => {\r\n    //     setDetailProduk({})\r\n    //     setIsModal(true)\r\n    // }\r\n    // const handleEdit = (data) => {\r\n    //     setDetailProduk(data.original)\r\n    //     setIsModal(true)\r\n    // }\r\n    // const confirmHapus = (data) => {\r\n    //     setDetailProduk(data.original)\r\n    //     setTextConfirm(`Yakin ingin hapus Produk ${data.original.namaProduk}? Data tidak dapat dikembalikan setelah hapus`)\r\n    //     setIsConfirm(true)\r\n    // }\r\n    // const handleHapus = () => {\r\n    //     mStok.hapusProduk(authLogin.clientID, authLogin.token, authLogin.klinik.kodeklinik, detailProduk.kodeProduk).then(resp => {\r\n    //         if (resp) {\r\n    //             Notifikasi(\"success\", `Produk ${detailProduk.namaProduk} berhasil dihapus`, \"\")\r\n    //             setIsReload(true)\r\n    //             setIsConfirm(false)\r\n    //         } else {\r\n    //             Notifikasi(\"error\", \"Server tidak dapat menjalankan perintah Anda saat ini. Silakan coba sesaat lagi\", \"Gagal Simpan\")\r\n    //         }\r\n    //     }).catch(err => {\r\n    //         if (isArray(err) && err.length > 0) {\r\n    //             Notifikasi(\"error\", err[0].message, \"Gagal Simpan\")\r\n    //         } else if (typeof err) {\r\n    //             Notifikasi(\"error\", err.message, \"Gagal Simpan\")\r\n    //         } else {\r\n    //             console.log(err);\r\n    //         }\r\n    //     })\r\n    // }\r\n    const dataTableColumns = [\r\n        {\r\n            Header: \"Kode Produk\",\r\n            accessor: \"kodeProduk\",\r\n            Cell: props => <p className=\"list-item-heading\">{isReload ? <Skeleton /> : props.value}</p>\r\n        },\r\n        {\r\n            Header: \"Nama Produk\",\r\n            accessor: \"namaProduk\",\r\n            Cell: props => <p className=\"list-item-heading\">{isReload ? <Skeleton /> : props.value}</p>\r\n        },\r\n        {\r\n            Header: \"Kategori\",\r\n            accessor: \"kategori\",\r\n            Cell: props => <p className=\"list-item-heading\">{isReload ? <Skeleton /> : props.value}</p>\r\n        },\r\n        {\r\n            Header: \"Jenis\",\r\n            accessor: \"jenis\",\r\n            Cell: props => <p className=\"list-item-heading\">{isReload ? <Skeleton /> : props.value}</p>\r\n        },\r\n        {\r\n            Header: \"Harga\",\r\n            accessor: \"harga\",\r\n            Cell: props => <p className=\"list-item-heading\">{isReload ? <Skeleton /> : props.value}</p>\r\n        },\r\n        {\r\n            Header: \"Satuan\",\r\n            accessor: \"satuan\",\r\n            Cell: props => <p className=\"list-item-heading\">{isReload ? <Skeleton /> : props.value}</p>\r\n        },\r\n        {\r\n            Header: \"Qty\",\r\n            accessor: \"stokQty\",\r\n            Cell: props => <p className=\"list-item-heading\">{isReload ? <Skeleton /> : props.value}</p>\r\n        },\r\n    ];\r\n    if (user.jenisUser === \"admin\") {\r\n        return (\r\n            <Fragment>\r\n                <Row>\r\n                    <Colxx xxs=\"12\">\r\n                        <div className=\"mb-2\">\r\n                            <h1>\r\n                                Inventory\r\n                            </h1>\r\n                            <Breadcrumb className=\"pt-0 breadcrumb-container d-none d-sm-block d-lg-inline-block\">\r\n                                <BreadcrumbItem>\r\n                                    <IntlMessages id=\"menu.stok-tersedia\" />\r\n                                </BreadcrumbItem>\r\n                            </Breadcrumb>\r\n\r\n                        </div>\r\n\r\n                        <Separator className=\"mb-5\" />\r\n                    </Colxx>\r\n                </Row>\r\n                <Row>\r\n                    <Colxx xxs=\"12\" className=\"mb-4\">\r\n                        <ContextMenuTrigger id=\"menu_id\" >\r\n                            <Card>\r\n                                <CardBody>\r\n                                    <ReactTable\r\n                                        data={cekStok}\r\n                                        columns={dataTableColumns}\r\n                                        defaultPageSize={5}\r\n                                        filterable={false}\r\n                                        showPageJump={true}\r\n                                        PaginationComponent={DataTablePagination}\r\n                                        showPageSizeOptions={true}\r\n                                    />\r\n                                </CardBody>\r\n                            </Card>\r\n                        </ContextMenuTrigger>\r\n                    </Colxx>\r\n                </Row>\r\n\r\n                {/* {isModal && (\r\n                    <ModalProduk open={isModal} setOpen={setIsModal} clientID={authLogin.clientID} token={authLogin.token} setIsReload={setIsReload} detailProduk={detailProduk} klinik={authLogin.klinik} />\r\n                )} */}\r\n                {/* {isConfirm && (\r\n                    <Confirm open={isConfirm} setOpen={setIsConfirm} textConfirm={textConfirm} oke={handleHapus} />\r\n                )} */}\r\n            </Fragment>\r\n        )\r\n    } else {\r\n        return (\r\n            <p>You do not have access rights</p>\r\n        )\r\n    }\r\n}\r\nexport default Admin;","import React, { Suspense } from 'react';\r\nimport { Redirect, Route, Switch } from 'react-router-dom';\r\nimport Produk from './StokTersedia'\r\n\r\n\r\nconst Gogo = ({ match }) => (\r\n  <Suspense fallback={<div className=\"loading\" />}>\r\n    <Switch>\r\n      <Redirect exact from={`${match.url}/index`} to={`${match.url}/index`} />\r\n      <Route\r\n        path={`${match.url}`}\r\n        render={props => <Produk {...props} />}\r\n      />\r\n      <Redirect to=\"/error\" />\r\n    </Switch>\r\n  </Suspense>\r\n);\r\nexport default Gogo;\r\n"],"sourceRoot":""}