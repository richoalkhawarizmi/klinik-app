{"version":3,"sources":["components/common/CustomBootstrap.js","Controler/c_User.js","../node_modules/reactnumberwithcommas/index.js","../node_modules/reactstrap/es/Card.js","../node_modules/reactstrap/es/CardBody.js","containers/navs/Breadcrumb.js","Controler/c_Transaksi.js","views/app/riwayat/Riwayat.Pasien.js","views/app/riwayat/Riwayat.Dokter.js","views/app/riwayat/index.js"],"names":["Colxx","props","widths","Separator","className","User","dataUser","clientID","token","username","jenisUser","Promise","resolve","reject","query","GQL","then","resp","errors","data","detailUser","catch","err","selectKlinikPasien","kodeklinik","namaklinik","updateLogin","simpanUser","selectKlinikAdmin","hapusUser","registerUser","nama","alamat","password","noHp","aktivasiUser","salt","forgetPassword","reqResetPassword","resetPassword","resetNewPassword","loginUser","updateProfil","numberWithCommas","x","parseFloat","Math","round","toFixed","toString","replace","propTypes","tag","tagPropType","inverse","PropTypes","bool","color","string","body","outline","cssModule","object","innerRef","oneOfType","func","Card","Tag","attributes","_objectWithoutPropertiesLoose","classes","mapToCssModules","classNames","React","createElement","_extends","ref","defaultProps","CardBody","getMenuTitle","sub","id","getUrl","path","index","split","BreadcrumbItems","match","substr","paths","length","indexOf","filter","map","key","active","to","BreadcrumbContainer","heading","Transaksi","listJanji","tanggal","moment","format","listJanjiNotConfirm","el","push","tanggalJanji","janji","jamMulaiJanji","jamSelesaiJanji","listJanjiByDokter","dokter","listJanjibyDokterConfirm","listDiperiksa","PasienDiperiksaByDokter","buatJanji","listBuatJanjibyDokter","konfirmasiHadir","konfirmasiJanji","konfirmasiDiperiksa","batalkanJanji","alasanBatal","batalJanji","listAntrian","listJanjiConfirm","listPasienDiperiksa","dataPasien","pasien","saveRiwayatPenyakit","penyakit","addRiwayatPenyakit","loadProduk","produk","cekStok","layanan","listLayanan","listPeralatan","savePeralatan","qty","kodeProduk","namaProduk","harga","satuan","simpanPeralatan","editPeralatan","hapusPeralatan","listResepObat","simpanResepObat","keterangan","editResepObat","hapusResepObat","finishPemeriksaanDokter","catatanDokter","isDatangKembali","ket","rekamMedis","listRekamMedis","listLayananTrans","simpanLayanan","kodeLayanan","namaLayanan","editLayanan","hapusLayanan","hapusLayananTrans","listPembayaran","listBayar","totObat","resepObatdokter","totBayar","reduce","a","b","peralatan","sudahBayar","totalTagihan","jumlahBayar","bayarTagihan","riwayatMengobatiPasien","Riwayat","authLogin","useState","setListRekamMedis","useEffect","mTrans","klinik","console","error","Col","sort","aa","datangKembali","reverse","join","bb","datas","i","Row","xs","md","JSON","parse","localStorage","getItem","user","setUser","isLoad","setIsLoad","mUser","finally","xxs","Breadcrumb","style","marginTop","height"],"mappings":"yHAAA,iGAEMA,EAAQ,SAACC,GAAD,OACV,kBAAC,IAAD,iBAASA,EAAT,CAAgBC,OAAQ,CAAC,MAAO,KAAM,KAAM,KAAM,KAAM,KAAM,WAE5DC,EAAY,SAACF,GAAD,OACd,yBAAKG,UAAS,oBAAeH,EAAMG,e,iCCNvC,YAGMC,EAAO,CACZC,SAAU,SAACC,EAAUC,EAAOC,EAAUC,GACrC,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC5B,IAAMC,EAAK,8EAE6BL,EAF7B,wBAEqDC,EAFrD,gMAUXK,YAAID,EAAOP,EAAUC,GAAOQ,MAAK,SAAAC,GAChC,OAAIA,EAAKC,OAAgBL,EAAOI,EAAKC,QACjCD,EAAKE,MAAQF,EAAKE,KAAKC,WAAoBR,EAAQK,EAAKE,KAAKC,YACzDR,EAAQ,OACdS,OAAM,SAAAC,GACR,OAAQT,EAAOS,UAIlBC,mBAAoB,SAAChB,EAAUC,EAAOgB,EAAYC,EAAYhB,GAC7D,OAAO,IAAIE,SAAQ,SAACC,EAASC,GAC5B,IAAMC,EAAK,+DAEiBU,EAFjB,2BAE8CC,EAF9C,mDAGoBhB,EAHpB,2BAG+Ce,EAH/C,2BAG4EC,EAH5E,+BAMXV,YAAID,EAAOP,EAAUC,GAAOQ,MAAK,SAAAC,GAChC,OAAIA,EAAKC,OAAgBL,EAAOI,EAAKC,QACjCD,EAAKE,MAAQF,EAAKE,KAAKO,aAAeT,EAAKE,KAAKQ,WAAoBf,GAAQ,GACxEA,EAAQ,OACdS,OAAM,SAAAC,GACR,OAAQT,EAAOS,UAIlBM,kBAAmB,SAACrB,EAAUC,EAAOgB,EAAYC,GAChD,OAAO,IAAId,SAAQ,SAACC,EAASC,GAC5B,IAAMC,EAAK,+DAEiBU,EAFjB,2BAE8CC,EAF9C,+BAKXV,YAAID,EAAOP,EAAUC,GAAOQ,MAAK,SAAAC,GAChC,OAAIA,EAAKC,OAAgBL,EAAOI,EAAKC,QACjCD,EAAKE,MAAQF,EAAKE,KAAKO,YAAqBd,GAAQ,GAChDA,EAAQ,OACdS,OAAM,SAAAC,GACR,OAAQT,EAAOS,UAIlBO,UAAW,SAACtB,EAAUC,EAAOC,GAC5B,OAAO,IAAIE,SAAQ,SAACC,EAASC,GAC5B,IAAMC,EAAK,2DAEaL,EAFb,+BAKXM,YAAID,EAAOP,EAAUC,GAAOQ,MAAK,SAAAC,GAChC,OAAIA,EAAKC,OAAgBL,EAAOI,EAAKC,QACjCD,EAAKE,MAAQF,EAAKE,KAAKU,UAAmBjB,GAAQ,GAC9CA,EAAQ,OACdS,OAAM,SAAAC,GACR,OAAQT,EAAOS,UAIlBQ,aAAc,SAACrB,EAAUsB,EAAMC,EAAQC,EAAUC,GAChD,OAAO,IAAIvB,SAAQ,SAACC,EAASC,GAC5B,IAAMC,EAAK,gFAGGL,EAHH,oCAIGwB,EAJH,gCAKDF,EALC,gCAMDG,EANC,kCAOCF,EAPD,gCAUXjB,YAAID,GAAOE,MAAK,SAAAC,GACf,OAAIA,EAAKC,OAAgBL,EAAOI,EAAKC,QACjCD,EAAKE,MAAQF,EAAKE,KAAKW,aAAsBlB,GAAQ,GACjDA,EAAQ,OACdS,OAAM,SAAAC,GACR,OAAQT,EAAOS,UAIlBa,aAAc,SAAC1B,EAAU2B,GACxB,OAAO,IAAIzB,SAAQ,SAACC,EAASC,GAC5B,IAAMC,EAAK,6DAEeL,EAFf,qBAEoC2B,EAFpC,+BAKXrB,YAAID,GAAOE,MAAK,SAAAC,GACf,OAAIA,EAAKC,OAAgBL,EAAOI,EAAKC,QACjCD,EAAKE,MAAQF,EAAKE,KAAKgB,aAAsBvB,GAAQ,GACjDA,EAAQ,OACdS,OAAM,SAAAC,GACR,OAAQT,EAAOS,UAIlBe,eAAgB,SAAC5B,GAChB,OAAO,IAAIE,SAAQ,SAACC,EAASC,GAC5B,IAAMC,EAAK,iEAEmBL,EAFnB,+BAKXM,YAAID,GAAOE,MAAK,SAAAC,GACf,OAAIA,EAAKC,OAAgBL,EAAOI,EAAKC,QACjCD,EAAKE,MAAQF,EAAKE,KAAKmB,iBAA0B1B,GAAQ,GACrDA,EAAQ,OACdS,OAAM,SAAAC,GACR,OAAQT,EAAOS,UAIlBiB,cAAe,SAAC9B,EAAU2B,EAAMH,GAC/B,OAAO,IAAItB,SAAQ,SAACC,EAASC,GAC5B,IAAMC,EAAK,iEAEmBL,EAFnB,qBAEwC2B,EAFxC,wBAE4DH,EAF5D,+BAKXlB,YAAID,GAAOE,MAAK,SAAAC,GACf,OAAIA,EAAKC,OAAgBL,EAAOI,EAAKC,QACjCD,EAAKE,MAAQF,EAAKE,KAAKqB,iBAA0B5B,GAAQ,GACrDA,EAAQ,OACdS,OAAM,SAAAC,GACR,OAAQT,EAAOS,UAIlBmB,UAAW,SAAChC,EAAUwB,GACrB,OAAO,IAAItB,SAAQ,SAACC,EAASC,GAC5B,IAAMC,EAAK,uDAEYL,EAFZ,uBAEmCwB,EAFnC,2MAcXlB,YAAID,GAAOE,MAAK,SAAAC,GACf,OAAIA,EAAKC,OAAgBL,EAAOI,EAAKC,QACjCD,EAAKE,MAAQF,EAAKE,KAAKsB,UAAmB7B,EAAQK,EAAKE,KAAKsB,WACxD7B,EAAQ,OACdS,OAAM,SAAAC,GACR,OAAQT,EAAOS,UAIlBF,WAAY,SAACb,EAAUC,EAAOC,EAAUC,GACvC,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC5B,IAAMC,EAAK,8EAE6BL,EAF7B,wBAEqDC,EAFrD,mKAUXK,YAAID,EAAOP,EAAUC,GAAOQ,MAAK,SAAAC,GAChC,OAAIA,EAAKC,OAAgBL,EAAOI,EAAKC,QACjCD,EAAKE,MAAQF,EAAKE,KAAKC,WAAoBR,EAAQK,EAAKE,KAAKC,YACzDR,EAAQ,OACdS,OAAM,SAAAC,GACR,OAAQT,EAAOS,UAIlBoB,aAAc,SAACnC,EAAUC,EAAOC,EAAWsB,EAAMG,EAAMF,EAAQtB,EAAYc,EAAYC,GACtF,OAAO,IAAId,SAAQ,SAACC,EAASC,GAC5B,IAAMC,EAAK,kEAEoBL,EAFpB,oBAEwCsB,EAFxC,oBAEwDG,EAFxD,sBAE0EF,EAF1E,yBAEiGtB,EAFjG,2BAE6Hc,EAF7H,2BAE0JC,EAF1J,+BAKXV,YAAID,EAAOP,EAAUC,GAAOQ,MAAK,SAAAC,GAChC,OAAIA,EAAKC,OAAgBL,EAAOI,EAAKC,QACjCD,EAAKE,MAAQF,EAAKE,KAAKQ,WAAoBf,GAAQ,GAC/CA,EAAQ,OACdS,OAAM,SAAAC,GACR,OAAQT,EAAOS,WAMJjB,O,iCC1MAsC,IALU,SAACC,GAGtB,OAFKA,IAAGA,EAAI,GACFC,WAAWC,KAAKC,MAAU,IAAJH,GAAW,KAAKI,QAAQ,GAC/CC,WAAWC,QAAQ,wBAAyB,O,iCCHzD,gFAMIC,EAAY,CACdC,IAAKC,IACLC,QAASC,IAAUC,KACnBC,MAAOF,IAAUG,OACjBC,KAAMJ,IAAUC,KAChBI,QAASL,IAAUC,KACnBpD,UAAWmD,IAAUG,OACrBG,UAAWN,IAAUO,OACrBC,SAAUR,IAAUS,UAAU,CAACT,IAAUO,OAAQP,IAAUG,OAAQH,IAAUU,QAM3EC,EAAO,SAAcjE,GACvB,IAAIG,EAAYH,EAAMG,UAClByD,EAAY5D,EAAM4D,UAClBJ,EAAQxD,EAAMwD,MACdE,EAAO1D,EAAM0D,KACbL,EAAUrD,EAAMqD,QAChBM,EAAU3D,EAAM2D,QAChBO,EAAMlE,EAAMmD,IACZW,EAAW9D,EAAM8D,SACjBK,EAAaC,YAA8BpE,EAAO,CAAC,YAAa,YAAa,QAAS,OAAQ,UAAW,UAAW,MAAO,aAE3HqE,EAAUC,YAAgBC,IAAWpE,EAAW,SAAQkD,GAAU,eAAsBK,GAAO,cAAqBF,IAASG,EAAU,SAAW,MAAQ,IAAMH,GAAgBI,GACpL,OAAOY,IAAMC,cAAcP,EAAKQ,YAAS,GAAIP,EAAY,CACvDhE,UAAWkE,EACXM,IAAKb,MAITG,EAAKf,UAAYA,EACjBe,EAAKW,aAvBc,CACjBzB,IAAK,OAuBQc,O,iCCxCf,gFAMIf,EAAY,CACdC,IAAKC,IACLjD,UAAWmD,IAAUG,OACrBG,UAAWN,IAAUO,OACrBC,SAAUR,IAAUS,UAAU,CAACT,IAAUO,OAAQP,IAAUG,OAAQH,IAAUU,QAM3Ea,EAAW,SAAkB7E,GAC/B,IAAIG,EAAYH,EAAMG,UAClByD,EAAY5D,EAAM4D,UAClBE,EAAW9D,EAAM8D,SACjBI,EAAMlE,EAAMmD,IACZgB,EAAaC,YAA8BpE,EAAO,CAAC,YAAa,YAAa,WAAY,QAEzFqE,EAAUC,YAAgBC,IAAWpE,EAAW,aAAcyD,GAClE,OAAOY,IAAMC,cAAcP,EAAKQ,YAAS,GAAIP,EAAY,CACvDhE,UAAWkE,EACXM,IAAKb,MAITe,EAAS3B,UAAYA,EACrB2B,EAASD,aAnBU,CACjBzB,IAAK,OAmBQ0B,O,iCChCf,wDAKMC,EAAe,SAAAC,GACnB,OAAO,kBAAC,IAAD,CAAcC,GAAE,eAAUD,MAG7BE,EAAS,SAACC,EAAMH,EAAKI,GACzB,OAAc,IAAVA,EACK,GAEAD,EAAKE,MAAML,GAAK,GAAKA,GAanBM,EAAkB,SAAC,GAAe,IACvCH,EADsC,EAAZI,MACbJ,KAAKK,OAAO,GAC3BC,EAAQN,EAAKE,MAAM,KAIvB,OAHII,EAAMA,EAAMC,OAAS,GAAGC,QAAQ,MAAQ,IAC1CF,EAAQA,EAAMG,QAAO,SAAAhD,GAAC,OAAwB,IAApBA,EAAE+C,QAAQ,SAGpC,kBAAC,WAAD,KACE,kBAAC,IAAD,CAAYvF,UAAU,iEACnBqF,EAAMI,KAAI,SAACb,EAAKI,GACf,OACE,kBAAC,IAAD,CAAgBU,IAAKV,EAAOW,OAAQN,EAAMC,SAAWN,EAAQ,GAC1DK,EAAMC,SAAWN,EAAQ,EACxB,kBAAC,IAAD,CAASY,GAAI,IAAMd,EAAOC,EAAMH,EAAKI,IAClCL,EAAaC,IAGhBD,EAAaC,UAUdiB,IApCa,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,QAASX,EAAY,EAAZA,MACtC,OACE,kBAAC,WAAD,KACGW,GAAW,4BAAI,kBAAC,IAAD,CAAcjB,GAAIiB,KAClC,kBAACZ,EAAD,CAAiBC,MAAOA,O,sECjBxBY,EAAY,CACdC,UAAW,SAAC7F,EAAUC,EAAOgB,EAAY6E,GACrC,OAAO,IAAI1F,SAAQ,SAACC,EAASC,GACzB,IAAMC,EAAK,yFAE+BU,EAF/B,sBAEuD8E,IAAOD,GAASE,OAAO,cAF9E,iaAgBXxF,YAAID,EAAOP,EAAUC,GAAOQ,MAAK,SAAAC,GAC7B,GAAIA,EAAKC,OAAQ,OAAQL,EAAOI,EAAKC,QACrC,IAAMkF,EAAY,GASlB,OARAnF,EAAKE,KAAKqF,oBAAoBX,KAAI,SAAAY,GAC9B,OAAOL,EAAUM,KAAV,eACAD,EADA,CAEHE,aAAcF,EAAGG,MAAMD,aACvBE,cAAeJ,EAAGG,MAAMC,cACxBC,gBAAiBL,EAAGG,MAAME,sBAG9B7F,EAAKE,MAAQF,EAAKE,KAAKqF,oBAA6B5F,EAAQwF,GACxDxF,EAAQ,OACjBS,OAAM,SAAAC,GACL,OAAQT,EAAOS,UAI3ByF,kBAAmB,SAACxG,EAAUC,EAAOgB,EAAY6E,EAASW,GACtD,OAAO,IAAIrG,SAAQ,SAACC,EAASC,GACzB,IAAMC,EAAK,8FAEoCU,EAFpC,sBAE4D8E,IAAOD,GAASE,OAAO,cAFnF,sBAE8GS,EAF9G,8bAc+BxF,EAd/B,sBAcuD8E,IAAOD,GAASE,OAAO,cAd9E,sBAcyGS,EAdzG,qZA0BiCxF,EA1BjC,sBA0ByD8E,IAAOD,GAASE,OAAO,cA1BhF,sBA0B2GS,EA1B3G,qXAwCXjG,YAAID,EAAOP,EAAUC,GAAOQ,MAAK,SAAAC,GAC7B,IAAMmF,EAAY,GACdnF,EAAKE,KAAK8F,0BACVhG,EAAKE,KAAK8F,yBAAyBpB,KAAI,SAAAY,GACnC,OAAOL,EAAUM,KAAV,eACAD,EADA,CAEHE,aAAcF,EAAGG,MAAMD,aACvBE,cAAeJ,EAAGG,MAAMC,cACxBC,gBAAiBL,EAAGG,MAAME,sBAItC,IAAMI,EAAgB,GAClBjG,EAAKE,KAAKgG,yBACVlG,EAAKE,KAAKgG,wBAAwBtB,KAAI,SAAAY,GAClC,OAAOS,EAAcR,KAAd,eACAD,EADA,CAEHE,aAAcF,EAAGG,MAAMD,aACvBE,cAAeJ,EAAGG,MAAMC,cACxBC,gBAAiBL,EAAGG,MAAME,sBAItC,IAAMM,EAAY,GAWlB,OAVInG,EAAKE,KAAKkG,uBACVpG,EAAKE,KAAKkG,sBAAsBxB,KAAI,SAAAY,GAChC,OAAOW,EAAUV,KAAV,eACAD,EADA,CAEHE,aAAcF,EAAGG,MAAMD,aACvBE,cAAeJ,EAAGG,MAAMC,cACxBC,gBAAiBL,EAAGG,MAAME,sBAIlC7F,EAAKE,KAAcP,EAAQ,CAAEwF,YAAWc,gBAAeE,cACnDxG,EAAQ,OACjBS,OAAM,SAAAC,GACL,OAAQT,EAAOS,UAI3BgG,gBAAiB,SAAC/G,EAAUC,EAAOyE,GAC/B,OAAO,IAAItE,SAAQ,SAACC,EAASC,GACzB,IAAMC,EAAK,8EAEqBmE,EAFrB,uCAKXlE,YAAID,EAAOP,EAAUC,GAAOQ,MAAK,SAAAC,GAC7B,OAAIA,EAAKC,OAAgBL,EAAOI,EAAKC,QACjCD,EAAKE,MAAQF,EAAKE,KAAKoG,gBAAyB3G,EAAQK,EAAKE,KAAKoG,iBAC9D3G,EAAQ,OACjBS,OAAM,SAAAC,GACL,OAAQT,EAAOS,UAI3BkG,oBAAqB,SAACjH,EAAUC,EAAOyE,GACnC,OAAO,IAAItE,SAAQ,SAACC,EAASC,GACzB,IAAMC,EAAK,kFAEyBmE,EAFzB,uCAKXlE,YAAID,EAAOP,EAAUC,GAAOQ,MAAK,SAAAC,GAC7B,OAAIA,EAAKC,OAAgBL,EAAOI,EAAKC,QACjCD,EAAKE,MAAQF,EAAKE,KAAKqG,oBAA6B5G,EAAQK,EAAKE,KAAKqG,qBAClE5G,EAAQ,OACjBS,OAAM,SAAAC,GACL,OAAQT,EAAOS,UAI3BmG,cAAe,SAAClH,EAAUC,EAAOyE,EAAIyC,GACjC,OAAO,IAAI/G,SAAQ,SAACC,EAASC,GACzB,IAAMC,EAAK,yEAEgBmE,EAFhB,2BAEqCyC,EAFrC,uCAKX3G,YAAID,EAAOP,EAAUC,GAAOQ,MAAK,SAAAC,GAC7B,OAAIA,EAAKC,OAAgBL,EAAOI,EAAKC,QACjCD,EAAKE,MAAQF,EAAKE,KAAKwG,WAAoB/G,EAAQK,EAAKE,KAAKwG,YACzD/G,EAAQ,OACjBS,OAAM,SAAAC,GACL,OAAQT,EAAOS,UAI3BsG,YAAa,SAACrH,EAAUC,EAAOgB,EAAY6E,GACvC,OAAO,IAAI1F,SAAQ,SAACC,EAASC,GACzB,IAAMC,EAAK,sFAE4BU,EAF5B,sBAEoD8E,IAAOD,GAASE,OAAO,cAF3E,gcAc+B/E,EAd/B,sBAcuD8E,IAAOD,GAASE,OAAO,cAd9E,yaA4BXxF,YAAID,EAAOP,EAAUC,GAAOQ,MAAK,SAAAC,GAC7B,IAAMmF,EAAY,GACdnF,EAAKE,KAAK0G,kBACV5G,EAAKE,KAAK0G,iBAAiBhC,KAAI,SAAAY,GAC3B,OAAOL,EAAUM,KAAV,eACAD,EADA,CAEHE,aAAcF,EAAGG,MAAMD,aACvBE,cAAeJ,EAAGG,MAAMC,cACxBC,gBAAiBL,EAAGG,MAAME,sBAItC,IAAMI,EAAgB,GAWtB,OAVIjG,EAAKE,KAAK2G,qBACV7G,EAAKE,KAAK2G,oBAAoBjC,KAAI,SAAAY,GAC9B,OAAOS,EAAcR,KAAd,eACAD,EADA,CAEHE,aAAcF,EAAGG,MAAMD,aACvBE,cAAeJ,EAAGG,MAAMC,cACxBC,gBAAiBL,EAAGG,MAAME,sBAIlC7F,EAAKE,KAAcP,EAAQ,CAAEwF,YAAWc,kBACpCtG,EAAQ,OACjBS,OAAM,SAAAC,GACL,OAAQT,EAAOS,UAI3ByG,WAAY,SAACxH,EAAUC,EAAOwH,GAC1B,OAAO,IAAIrH,SAAQ,SAACC,EAASC,GACzB,IAAMC,EAAK,8EAEoBkH,EAFpB,yPAWXjH,YAAID,EAAOP,EAAUC,GAAOQ,MAAK,SAAAC,GAC7B,OAAIA,EAAKC,OAAgBL,EAAOI,EAAKC,QACjCD,EAAKE,MAAQF,EAAKE,KAAKC,WAAoBR,EAAQK,EAAKE,KAAKC,YACzDR,EAAQ,OACjBS,OAAM,SAAAC,GACL,OAAQT,EAAOS,UAI3B2G,oBAAqB,SAAC1H,EAAUC,EAAOwH,EAAQE,GAC3C,OAAO,IAAIvH,SAAQ,SAACC,EAASC,GACzB,IAAMC,EAAK,sFAE6BkH,EAF7B,wBAEmDE,EAFnD,uCAKXnH,YAAID,EAAOP,EAAUC,GAAOQ,MAAK,SAAAC,GAC7B,OAAIA,EAAKC,OAAgBL,EAAOI,EAAKC,QACjCD,EAAKE,MAAQF,EAAKE,KAAKgH,mBAA4BvH,EAAQK,EAAKE,KAAKgH,oBACjEvH,EAAQ,OACjBS,OAAM,SAAAC,GACL,OAAQT,EAAOS,UAI3B8G,WAAY,SAAC7H,EAAUC,EAAOgB,GAC1B,OAAO,IAAIb,SAAQ,SAACC,EAASC,GACzB,IAAMC,EAAK,6EAEmBU,EAFnB,sNAQqBA,EARrB,0JAeXT,YAAID,EAAOP,EAAUC,GAAOQ,MAAK,SAAAC,GAC7B,GAAIA,EAAKC,OAAQ,OAAQL,EAAOI,EAAKC,QACrC,IAAMmH,EAASpH,EAAKE,KAAKmH,QACnBC,EAAUtH,EAAKE,KAAKqH,YAC1B,OAAIvH,EAAKE,MAAQF,EAAKE,KAAKmH,SAAWC,EAAiB3H,EAAQ,CAAEyH,SAAQE,YACjE3H,EAAQ,OACjBS,OAAM,SAAAC,GACL,OAAQT,EAAOS,UAI3BmH,cAAe,SAAClI,EAAUC,EAAOyE,GAC7B,OAAO,IAAItE,SAAQ,SAACC,EAASC,GACzB,IAAMC,EAAK,6EAEmBmE,EAFnB,mOAWXlE,YAAID,EAAOP,EAAUC,GAAOQ,MAAK,SAAAC,GAC7B,OAAIA,EAAKC,OAAgBL,EAAOI,EAAKC,QACjCD,EAAKE,MAAQF,EAAKE,KAAKsH,cAAuB7H,EAAQK,EAAKE,KAAKsH,eAC5D7H,EAAQ,OACjBS,OAAM,SAAAC,GACL,OAAQT,EAAOS,UAI3BoH,cAAe,SAACnI,EAAUC,EAAOyE,EAAIoD,EAAQM,GACzC,OAAO,IAAIhI,SAAQ,SAACC,EAASC,GACzB,IAAMC,EAAK,0EAEiBmE,EAFjB,2BAEsCoD,EAAOO,WAF7C,2BAE0EP,EAAOQ,WAFjF,qBAEwGR,EAAOS,MAF/G,mBAE+HH,EAF/H,qBAE+IN,EAAOU,OAFtJ,uCAKXhI,YAAID,EAAOP,EAAUC,GAAOQ,MAAK,SAAAC,GAC7B,OAAIA,EAAKC,OAAgBL,EAAOI,EAAKC,QACjCD,EAAKE,MAAQF,EAAKE,KAAK6H,gBAAyBpI,EAAQK,EAAKE,KAAK6H,iBAC9DpI,EAAQ,OACjBS,OAAM,SAAAC,GACL,OAAQT,EAAOS,UAI3B2H,cAAe,SAAC1I,EAAUC,EAAOyE,EAAIoD,EAAQM,GACzC,OAAO,IAAIhI,SAAQ,SAACC,EAASC,GACzB,IAAMC,EAAK,wEAEemE,EAFf,2BAEoCoD,EAAOO,WAF3C,2BAEwEP,EAAOQ,WAF/E,qBAEsGR,EAAOS,MAF7G,mBAE6HH,EAF7H,qBAE6IN,EAAOU,OAFpJ,uCAKXhI,YAAID,EAAOP,EAAUC,GAAOQ,MAAK,SAAAC,GAC7B,OAAIA,EAAKC,OAAgBL,EAAOI,EAAKC,QACjCD,EAAKE,MAAQF,EAAKE,KAAK8H,cAAuBrI,EAAQK,EAAKE,KAAK8H,eAC5DrI,EAAQ,OACjBS,OAAM,SAAAC,GACL,OAAQT,EAAOS,UAI3B4H,eAAgB,SAAC3I,EAAUC,EAAOyE,EAAI2D,EAAYD,GAC9C,OAAO,IAAIhI,SAAQ,SAACC,EAASC,GACzB,IAAMC,EAAK,yEAEgBmE,EAFhB,2BAEqC2D,EAFrC,uCAKX7H,YAAID,EAAOP,EAAUC,GAAOQ,MAAK,SAAAC,GAC7B,OAAIA,EAAKC,OAAgBL,EAAOI,EAAKC,QACjCD,EAAKE,MAAQF,EAAKE,KAAK+H,eAAwBtI,EAAQK,EAAKE,KAAK+H,gBAC7DtI,EAAQ,OACjBS,OAAM,SAAAC,GACL,OAAQT,EAAOS,UAI3B6H,cAAe,SAAC5I,EAAUC,EAAOyE,GAC7B,OAAO,IAAItE,SAAQ,SAACC,EAASC,GACzB,IAAMC,EAAK,6EAEmBmE,EAFnB,uQAYXlE,YAAID,EAAOP,EAAUC,GAAOQ,MAAK,SAAAC,GAC7B,OAAIA,EAAKC,OAAgBL,EAAOI,EAAKC,QACjCD,EAAKE,MAAQF,EAAKE,KAAKgI,cAAuBvI,EAAQK,EAAKE,KAAKgI,eAC5DvI,EAAQ,OACjBS,OAAM,SAAAC,GACL,OAAQT,EAAOS,UAI3B8H,gBAAiB,SAAC7I,EAAUC,EAAOyE,EAAIoD,EAAQM,EAAKU,GAChD,OAAO,IAAI1I,SAAQ,SAACC,EAASC,GACzB,IAAMC,EAAK,0EAEiBmE,EAFjB,2BAEsCoD,EAAOO,WAF7C,2BAE0EP,EAAOQ,WAFjF,qBAEwGR,EAAOS,MAF/G,mBAE+HH,EAF/H,qBAE+IN,EAAOU,OAFtJ,yBAE6KM,EAF7K,uCAKXtI,YAAID,EAAOP,EAAUC,GAAOQ,MAAK,SAAAC,GAC7B,OAAIA,EAAKC,OAAgBL,EAAOI,EAAKC,QACjCD,EAAKE,MAAQF,EAAKE,KAAKiI,gBAAyBxI,EAAQK,EAAKE,KAAKiI,iBAC9DxI,EAAQ,OACjBS,OAAM,SAAAC,GACL,OAAQT,EAAOS,UAI3BgI,cAAe,SAAC/I,EAAUC,EAAOyE,EAAIoD,EAAQM,EAAKU,GAC9C,OAAO,IAAI1I,SAAQ,SAACC,EAASC,GACzB,IAAMC,EAAK,wEAEemE,EAFf,2BAEoCoD,EAAOO,WAF3C,2BAEwEP,EAAOQ,WAF/E,qBAEsGR,EAAOS,MAF7G,mBAE6HH,EAF7H,qBAE6IN,EAAOU,OAFpJ,yBAE2KM,EAF3K,uCAKXtI,YAAID,EAAOP,EAAUC,GAAOQ,MAAK,SAAAC,GAC7B,OAAIA,EAAKC,OAAgBL,EAAOI,EAAKC,QACjCD,EAAKE,MAAQF,EAAKE,KAAKmI,cAAuB1I,EAAQK,EAAKE,KAAKmI,eAC5D1I,EAAQ,OACjBS,OAAM,SAAAC,GACL,OAAQT,EAAOS,UAI3BiI,eAAgB,SAAChJ,EAAUC,EAAOyE,EAAI2D,EAAYD,GAC9C,OAAO,IAAIhI,SAAQ,SAACC,EAASC,GACzB,IAAMC,EAAK,yEAEgBmE,EAFhB,2BAEqC2D,EAFrC,uCAKX7H,YAAID,EAAOP,EAAUC,GAAOQ,MAAK,SAAAC,GAC7B,OAAIA,EAAKC,OAAgBL,EAAOI,EAAKC,QACjCD,EAAKE,MAAQF,EAAKE,KAAKoI,eAAwB3I,EAAQK,EAAKE,KAAKoI,gBAC7D3I,EAAQ,OACjBS,OAAM,SAAAC,GACL,OAAQT,EAAOS,UAI3BkI,wBAAyB,SAACjJ,EAAUC,EAAOyE,EAAIwE,EAAeC,EAAiBrD,EAASsD,GACpF,OAAO,IAAIhJ,SAAQ,SAACC,EAASC,GACzB,IAAMC,EAAK,kFAEyBmE,EAFzB,4BAE+CwE,EAF/C,8BAEkFC,EAFlF,uBAEgHrD,EAFhH,2BAE0IsD,EAF1I,uCAKX5I,YAAID,EAAOP,EAAUC,GAAOQ,MAAK,SAAAC,GAC7B,OAAIA,EAAKC,OAAgBL,EAAOI,EAAKC,QACjCD,EAAKE,MAAQF,EAAKE,KAAKqI,wBAAiC5I,EAAQK,EAAKE,KAAKqI,yBACtE5I,EAAQ,OACjBS,OAAM,SAAAC,GACL,OAAQT,EAAOS,UAI3BsI,WAAY,SAACrJ,EAAUC,EAAOgB,EAAYwG,GACtC,OAAO,IAAIrH,SAAQ,SAACC,EAASC,GACzB,IAAMC,EAAK,gFAEsBkH,EAFtB,0BAE8CxG,EAF9C,4tCAsCXT,YAAID,EAAOP,EAAUC,GAAOQ,MAAK,SAAAC,GAC7B,GAAIA,EAAKC,OAAQ,OAAQL,EAAOI,EAAKC,QACrC,IAAM0I,EAAa,GAOnB,OANA3I,EAAKE,KAAK0I,eAAehE,KAAI,SAAAY,GACzB,OAAOmD,EAAWlD,KAAX,eACAD,EADA,CAEHE,aAAcF,EAAGG,MAAMD,mBAG3B1F,EAAKE,MAAQF,EAAKE,KAAK0I,eAAwBjJ,EAAQgJ,GACnDhJ,EAAQ,OACjBS,OAAM,SAAAC,GACL,OAAQT,EAAOS,UAI3BkH,YAAa,SAACjI,EAAUC,EAAOyE,GAC3B,OAAO,IAAItE,SAAQ,SAACC,EAASC,GACzB,IAAMC,EAAK,gFAEsBmE,EAFtB,yQAYXlE,YAAID,EAAOP,EAAUC,GAAOQ,MAAK,SAAAC,GAC7B,OAAIA,EAAKC,OAAgBL,EAAOI,EAAKC,QACjCD,EAAKE,MAAQF,EAAKE,KAAK2I,iBAA0BlJ,EAAQK,EAAKE,KAAK2I,kBAC/DlJ,EAAQ,OACjBS,OAAM,SAAAC,GACL,OAAQT,EAAOS,UAI3ByI,cAAe,SAACxJ,EAAUC,EAAOyE,EAAIsD,EAASI,EAAKU,GAC/C,OAAO,IAAI1I,SAAQ,SAACC,EAASC,GACzB,IAAMC,EAAK,6EAEoBmE,EAFpB,4BAE0CsD,EAAQyB,YAFlD,4BAEiFzB,EAAQ0B,YAFzF,qBAEiH1B,EAAQO,MAFzH,mBAEyIH,EAFzI,wBAE4JU,EAF5J,uCAKXtI,YAAID,EAAOP,EAAUC,GAAOQ,MAAK,SAAAC,GAC7B,OAAIA,EAAKC,OAAgBL,EAAOI,EAAKC,QACjCD,EAAKE,MAAQF,EAAKE,KAAK4I,cAAuBnJ,EAAQK,EAAKE,KAAK4I,eAC5DnJ,EAAQ,OACjBS,OAAM,SAAAC,GACL,OAAQT,EAAOS,UAI3B4I,YAAa,SAAC3J,EAAUC,EAAOyE,EAAIsD,EAASI,EAAKU,GAC7C,OAAO,IAAI1I,SAAQ,SAACC,EAASC,GACzB,IAAMC,EAAK,2EAEkBmE,EAFlB,4BAEwCsD,EAAQyB,YAFhD,4BAE+EzB,EAAQ0B,YAFvF,qBAE+G1B,EAAQO,MAFvH,mBAEuIH,EAFvI,wBAE0JU,EAF1J,uCAKXtI,YAAID,EAAOP,EAAUC,GAAOQ,MAAK,SAAAC,GAC7B,OAAIA,EAAKC,OAAgBL,EAAOI,EAAKC,QACjCD,EAAKE,MAAQF,EAAKE,KAAK+I,YAAqBtJ,EAAQK,EAAKE,KAAK+I,aAC1DtJ,EAAQ,OACjBS,OAAM,SAAAC,GACL,OAAQT,EAAOS,UAI3B6I,aAAc,SAAC5J,EAAUC,EAAOyE,EAAI+E,GAChC,OAAO,IAAIrJ,SAAQ,SAACC,EAASC,GACzB,IAAMC,EAAK,4EAEmBmE,EAFnB,2BAEwC+E,EAFxC,mCAKXjJ,YAAID,EAAOP,EAAUC,GAAOQ,MAAK,SAAAC,GAC7B,OAAIA,EAAKC,OAAgBL,EAAOI,EAAKC,QACjCD,EAAKE,MAAQF,EAAKE,KAAKiJ,kBAA2BxJ,EAAQK,EAAKE,KAAKiJ,mBAChExJ,EAAQ,OACjBS,OAAM,SAAAC,GACL,OAAQT,EAAOS,UAI3B+I,eAAgB,SAAC9J,EAAUC,EAAOgB,EAAY6E,GAC1C,OAAO,IAAI1F,SAAQ,SAACC,EAASC,GACzB,IAAMC,EAAK,oFAE0BU,EAF1B,sBAEkD8E,IAAOD,GAASE,OAAO,cAFzE,6kCAoCXxF,YAAID,EAAOP,EAAUC,GAAOQ,MAAK,SAAAC,GAC7B,GAAIA,EAAKC,OAAQ,OAAQL,EAAOI,EAAKC,QACrC,IAAMoJ,EAAY,GASlB,OARArJ,EAAKE,KAAKkJ,eAAexE,KAAI,SAAAY,GACzB,OAAO6D,EAAU5D,KAAV,eACAD,EADA,CAEHE,aAAcF,EAAGG,MAAMD,aACvB4D,QAAS9D,EAAG+D,gBAAgB9E,OAC5B+E,SAAUhE,EAAG8B,QAAQ1C,KAAI,SAAAY,GAAE,OAAIA,EAAGkC,IAAMlC,EAAGqC,SAAO4B,QAAO,SAACC,EAAGC,GAAJ,OAAUD,EAAIC,IAAG,GAAKnE,EAAG+D,gBAAgB3E,KAAI,SAAAY,GAAE,OAAIA,EAAGkC,IAAMlC,EAAGqC,SAAO4B,QAAO,SAACC,EAAGC,GAAJ,OAAUD,EAAIC,IAAG,GAAKnE,EAAGoE,UAAUhF,KAAI,SAAAY,GAAE,OAAIA,EAAGkC,IAAMlC,EAAGqC,SAAO4B,QAAO,SAACC,EAAGC,GAAJ,OAAUD,EAAIC,IAAG,SAGlO3J,EAAKE,MAAQF,EAAKE,KAAKkJ,eAAwBzJ,EAAQ0J,GACnD1J,EAAQ,OACjBS,OAAM,SAAAC,GACL,OAAQT,EAAOS,UAI3BwJ,WAAY,SAACvK,EAAUC,EAAOyE,EAAI8F,EAAcC,GAC5C,OAAO,IAAIrK,SAAQ,SAACC,EAASC,GACzB,IAAMC,EAAK,uEAEcmE,EAFd,2BAEmC8F,EAFnC,yBAEgEC,EAFhE,oBAIXjK,YAAID,EAAOP,EAAUC,GAAOQ,MAAK,SAAAC,GAC7B,OAAIA,EAAKC,OAAgBL,EAAOI,EAAKC,QACjCD,EAAKE,MAAQF,EAAKE,KAAK8J,aAAsBrK,EAAQK,EAAKE,KAAK8J,cAC3DrK,EAAQ,OACjBS,OAAM,SAAAC,GACL,OAAQT,EAAOS,UAI3B4J,uBAAwB,SAAC3K,EAAUC,EAAOgB,EAAYwF,GAClD,OAAO,IAAIrG,SAAQ,SAACC,EAASC,GACzB,IAAMC,EAAK,wFAE8BkG,EAF9B,0BAEsDxF,EAFtD,0oCAoCXT,YAAID,EAAOP,EAAUC,GAAOQ,MAAK,SAAAC,GAC7B,GAAIA,EAAKC,OAAQ,OAAQL,EAAOI,EAAKC,QACrC,IAAM0I,EAAa,GAOnB,OANA3I,EAAKE,KAAK+J,uBAAuBrF,KAAI,SAAAY,GACjC,OAAOmD,EAAWlD,KAAX,eACAD,EADA,CAEHE,aAAcF,EAAGG,MAAMD,mBAG3B1F,EAAKE,MAAQF,EAAKE,KAAK+J,uBAAgCtK,EAAQgJ,GAC3DhJ,EAAQ,OACjBS,OAAM,SAAAC,GACL,OAAQT,EAAOS,WAOhB6E,O,0LCzoBAgF,EAvDC,SAAAlL,GACZ,IAAMmL,EAAYnL,EAAMmL,UADH,EAEuBC,mBAAS,IAFhC,mBAEdxB,EAFc,KAEEyB,EAFF,KAarB,OAVAC,qBAAU,WAMN,OALAC,IAAO5B,WAAWwB,EAAU7K,SAAU6K,EAAU5K,MAAO4K,EAAUK,OAAOjK,WAAY4J,EAAU3K,UAAUO,MAAK,SAAAC,GACzGqK,EAAkBrK,MACnBI,OAAM,SAAAC,GACLoK,QAAQC,MAAMrK,MAEX,eAGR,CAAC8J,EAAU7K,SAAU6K,EAAU5K,MAAO4K,EAAU3K,SAAU2K,EAAUK,OAAOjK,aAE1E,kBAAC,WAAD,KACI,kBAACoK,EAAA,EAAD,KACK/B,EAAegC,MAAK,SAAClB,EAAGC,GACrB,IAAIkB,EAAKxF,IAAOqE,EAAEoB,cAAc1F,SAASE,OAAO,cAAclB,MAAM,KAAK2G,UAAUC,OAC/EC,EAAK5F,IAAOsE,EAAEmB,cAAc1F,SAASE,OAAO,cAAclB,MAAM,KAAK2G,UAAUC,OACnF,OAAOH,EAAKI,GAAM,EAAKJ,EAAKI,EAAK,EAAI,KACtCrG,KAAI,SAACsG,EAAOC,GACX,OACI,kBAAClI,EAAA,EAAD,CAAM9D,UAAU,aAAa0F,IAAKsG,GAC9B,kBAACtH,EAAA,EAAD,KACI,kBAACuH,EAAA,EAAD,KACI,kBAACT,EAAA,EAAD,CAAKU,GAAI,GAAIC,GAAI,GACb,gDAAqB,2BAAIjG,IAAO6F,EAAMvF,MAAMD,cAAcJ,OAAO,gBACjE,gDAAqB,2BAAI4F,EAAM1C,gBAC9B0C,EAAMzC,iBACH,2BACI,uDAA4B,2BAAIpD,IAAO6F,EAAMJ,cAAc1F,SAASE,OAAO,gBAC3E,4CAAiB,2BAAI4F,EAAMJ,cAAc1C,cAGjD,4BAAI,uCACH8C,EAAM5D,QAAQ7C,OAAS,GAAKyG,EAAM5D,QAAQ1C,KAAI,SAACY,EAAI2F,GAAL,OAC3C,uBAAGhH,MAAOgH,GAAV,KAAgB3F,EAAGwD,YAAnB,MAAmCxD,EAAGkC,QAE1C,4BAAI,gDACHwD,EAAM3B,gBAAgB9E,OAAS,GAAKyG,EAAM3B,gBAAgB3E,KAAI,SAACY,EAAI2F,GAAL,OAC3D,uBAAGhH,MAAOgH,GAAV,KAAgB3F,EAAGoC,WAAnB,MAAkCpC,EAAGkC,SAG7C,kBAACiD,EAAA,EAAD,CAAKU,GAAI,GAAIC,GAAI,GACb,wBAAInM,UAAU,cAAa,2BAAG,2BAAIuC,YAAiBwJ,EAAMpB,2BCQlFI,EArDC,SAAAlL,GACZ,IAAMmL,EAAYnL,EAAMmL,UADH,EAEuBC,mBAAS,IAFhC,mBAEdxB,EAFc,KAEEyB,EAFF,KAarB,OAVAC,qBAAU,WAMN,OALAC,IAAON,uBAAuBE,EAAU7K,SAAU6K,EAAU5K,MAAO4K,EAAUK,OAAOjK,WAAY4J,EAAU3K,UAAUO,MAAK,SAAAC,GACrHqK,EAAkBrK,MACnBI,OAAM,SAAAC,GACLoK,QAAQC,MAAMrK,MAEX,eAGR,CAAC8J,EAAU7K,SAAU6K,EAAU5K,MAAO4K,EAAU3K,SAAU2K,EAAUK,OAAOjK,aAE1E,kBAAC,WAAD,KACI,kBAACoK,EAAA,EAAD,KACK/B,EAAegC,MAAK,SAAClB,EAAGC,GACrB,IAAIkB,EAAKxF,IAAOqE,EAAEoB,cAAc1F,SAASE,OAAO,cAAclB,MAAM,KAAK2G,UAAUC,OAC/EC,EAAK5F,IAAOsE,EAAEmB,cAAc1F,SAASE,OAAO,cAAclB,MAAM,KAAK2G,UAAUC,OACnF,OAAOH,EAAKI,GAAM,EAAKJ,EAAKI,EAAK,EAAI,KACtCrG,KAAI,SAACsG,EAAOC,GACX,OACI,kBAAClI,EAAA,EAAD,CAAM9D,UAAU,aAAa0F,IAAKsG,GAC9B,kBAACtH,EAAA,EAAD,KACI,kBAACuH,EAAA,EAAD,KACI,kBAACT,EAAA,EAAD,CAAKU,GAAI,GAAIC,GAAI,IACb,gDAAqB,2BAAIjG,IAAO6F,EAAMvF,MAAMD,cAAcJ,OAAO,gBACjE,wCAAa,2BAAI4F,EAAMnE,SACvB,8CAAmB,2BAAImE,EAAM1C,gBAC5B0C,EAAMzC,iBACH,2BACI,uDAA4B,2BAAIpD,IAAO6F,EAAMJ,cAAc1F,SAASE,OAAO,gBAC3E,4CAAiB,2BAAI4F,EAAMJ,cAAc1C,cAGjD,4BAAI,uCACH8C,EAAM5D,QAAQ7C,OAAS,GAAKyG,EAAM5D,QAAQ1C,KAAI,SAACY,EAAI2F,GAAL,OAC3C,uBAAGhH,MAAOgH,GAAV,KAAgB3F,EAAGwD,YAAnB,MAAmCxD,EAAGkC,QAE1C,4BAAI,oCACHwD,EAAM3B,gBAAgB9E,OAAS,GAAKyG,EAAM3B,gBAAgB3E,KAAI,SAACY,EAAI2F,GAAL,OAC3D,uBAAGhH,MAAOgH,GAAV,KAAgB3F,EAAGoC,WAAnB,MAAkCpC,EAAGkC,kBCclEwC,UAnDC,SAAClL,GACf,IAAMmL,EAAYoB,KAAKC,MAAMC,aAAaC,QAAQ,gBADzB,EAEDtB,mBAAS,IAFR,mBAElBuB,EAFkB,KAEZC,EAFY,OAGGxB,oBAAS,GAHZ,mBAGlByB,EAHkB,KAGVC,EAHU,KAIzBxB,qBAAU,WAMR,OALAyB,IAAM1M,SAAS8K,EAAU7K,SAAU6K,EAAU5K,MAAO4K,EAAU3K,SAAU2K,EAAU1K,WAAWM,MAAK,SAAAC,GAChG4L,EAAQ5L,MACPI,OAAM,SAAAC,GACPoK,QAAQC,MAAMrK,MACb2L,SAAQ,kBAAMF,GAAU,MACpB,eAGN,CAACD,EAAQ1B,EAAU7K,SAAU6K,EAAU5K,MAAO4K,EAAU3K,SAAU2K,EAAU1K,YAW/E,OACE,kBAAC,WAAD,KACE,kBAAC2L,EAAA,EAAD,KACE,kBAAC,IAAD,CAAOa,IAAI,MACT,kBAACC,EAAA,EAAD,CAAYjH,QAAQ,eAAeX,MAAOtF,EAAMsF,QAChD,kBAAC,IAAD,CAAWnF,UAAU,WAIzB,kBAACiM,EAAA,EAAD,KACGS,EACC,kBAAClB,EAAA,EAAD,KAZW,CAAC,EAAG,EAAG,GAaJ/F,KAAI,SAAAY,GAAE,OAChB,kBAACvC,EAAA,EAAD,CAAM4B,IAAKW,EAAI2G,MAAO,CAAEC,UAAW,IACjC,kBAACvI,EAAA,EAAD,KACE,kBAAC,IAAD,CAAUwI,OAAQ,YAxBT,WAAnBV,EAAKlM,UACA,kBAAC,EAAD,CAAe0K,UAAWA,IACL,WAAnBwB,EAAKlM,UACP,kBAAC,EAAD,CAAe0K,UAAWA,IAE1B","file":"static/js/45.fe254bef.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Col } from 'reactstrap';\r\nconst Colxx = (props) => (\r\n    <Col {...props} widths={['xxs', 'xs', 'sm', 'md', 'lg', 'xl', 'xxl']} />\r\n);\r\nconst Separator = (props) => (\r\n    <div className={`separator ${props.className}`}></div>\r\n);\r\nexport { Colxx,Separator }","import GQL from '../helpers/GQL'\r\n\r\n\r\nconst User = {\r\n\tdataUser: (clientID, token, username, jenisUser) => {\r\n\t\treturn new Promise((resolve, reject) => {\r\n\t\t\tconst query = `\r\n                query {\r\n                    detailUser(username:\"${username}\",jenisUser:\"${jenisUser}\"){\r\n                        superadmin\r\n                        nama\r\n                        noHp\r\n                        jenisUser\r\n                  }\r\n                }\r\n            `\r\n\t\t\tGQL(query, clientID, token).then(resp => {\r\n\t\t\t\tif (resp.errors) return (reject(resp.errors));;\r\n\t\t\t\tif (resp.data && resp.data.detailUser) return (resolve(resp.data.detailUser));\r\n\t\t\t\treturn (resolve([]))\r\n\t\t\t}).catch(err => {\r\n\t\t\t\treturn (reject(err));\r\n\t\t\t})\r\n\t\t})\r\n\t},\r\n\tselectKlinikPasien: (clientID, token, kodeklinik, namaklinik, username) => {\r\n\t\treturn new Promise((resolve, reject) => {\r\n\t\t\tconst query = `\r\n\t\t\tmutation {\r\n\t\t\t\tupdateLogin(kodeklinik: \"${kodeklinik}\", namaklinik: \"${namaklinik}\")\r\n\t\t\t\tsimpanUser(input:{username:\"${username}\"}, kodeklinik:\"${kodeklinik}\", namaklinik: \"${namaklinik}\")\r\n\t\t\t  }\r\n            `\r\n\t\t\tGQL(query, clientID, token).then(resp => {\r\n\t\t\t\tif (resp.errors) return (reject(resp.errors));\r\n\t\t\t\tif (resp.data && resp.data.updateLogin && resp.data.simpanUser) return (resolve(true));\r\n\t\t\t\treturn (resolve([]))\r\n\t\t\t}).catch(err => {\r\n\t\t\t\treturn (reject(err));\r\n\t\t\t})\r\n\t\t})\r\n\t},\r\n\tselectKlinikAdmin: (clientID, token, kodeklinik, namaklinik) => {\r\n\t\treturn new Promise((resolve, reject) => {\r\n\t\t\tconst query = `\r\n\t\t\tmutation {\r\n\t\t\t\tupdateLogin(kodeklinik: \"${kodeklinik}\", namaklinik: \"${namaklinik}\")\r\n\t\t\t  }\r\n            `\r\n\t\t\tGQL(query, clientID, token).then(resp => {\r\n\t\t\t\tif (resp.errors) return (reject(resp.errors));\r\n\t\t\t\tif (resp.data && resp.data.updateLogin) return (resolve(true));\r\n\t\t\t\treturn (resolve([]))\r\n\t\t\t}).catch(err => {\r\n\t\t\t\treturn (reject(err));\r\n\t\t\t})\r\n\t\t})\r\n\t},\r\n\thapusUser: (clientID, token, username) => {\r\n\t\treturn new Promise((resolve, reject) => {\r\n\t\t\tconst query = `\r\n\t\t\tmutation {\r\n\t\t\t\thapusUser(username: \"${username}\")\r\n\t\t\t  }\r\n            `\r\n\t\t\tGQL(query, clientID, token).then(resp => {\r\n\t\t\t\tif (resp.errors) return (reject(resp.errors));\r\n\t\t\t\tif (resp.data && resp.data.hapusUser) return (resolve(true));\r\n\t\t\t\treturn (resolve([]))\r\n\t\t\t}).catch(err => {\r\n\t\t\t\treturn (reject(err));\r\n\t\t\t})\r\n\t\t})\r\n\t},\r\n\tregisterUser: (username, nama, alamat, password, noHp) => {\r\n\t\treturn new Promise((resolve, reject) => {\r\n\t\t\tconst query = `\r\n\t\t\tmutation {\r\n\t\t\t\tregisterUser(input:{\r\n\t\t\t\t\tusername:\"${username}\", \r\n\t\t\t\t\tpassword:\"${password}\", \r\n\t\t\t\t\tnama:\"${nama}\", \r\n\t\t\t\t\tnoHp:\"${noHp}\", \r\n\t\t\t\t\talamat:\"${alamat}\"})\r\n\t\t\t  }\r\n            `\r\n\t\t\tGQL(query).then(resp => {\r\n\t\t\t\tif (resp.errors) return (reject(resp.errors));\r\n\t\t\t\tif (resp.data && resp.data.registerUser) return (resolve(true));\r\n\t\t\t\treturn (resolve([]))\r\n\t\t\t}).catch(err => {\r\n\t\t\t\treturn (reject(err));\r\n\t\t\t})\r\n\t\t})\r\n\t},\r\n\taktivasiUser: (username, salt) => {\r\n\t\treturn new Promise((resolve, reject) => {\r\n\t\t\tconst query = `\r\n\t\t\tmutation {\r\n\t\t\t\taktivasiUser(username:\"${username}\", salt: \"${salt}\")\r\n\t\t\t  }\r\n            `\r\n\t\t\tGQL(query).then(resp => {\r\n\t\t\t\tif (resp.errors) return (reject(resp.errors));\r\n\t\t\t\tif (resp.data && resp.data.aktivasiUser) return (resolve(true));\r\n\t\t\t\treturn (resolve([]))\r\n\t\t\t}).catch(err => {\r\n\t\t\t\treturn (reject(err));\r\n\t\t\t})\r\n\t\t})\r\n\t},\r\n\tforgetPassword: (username) => {\r\n\t\treturn new Promise((resolve, reject) => {\r\n\t\t\tconst query = `\r\n\t\t\tmutation {\r\n\t\t\t\treqResetPassword(username:\"${username}\")\r\n\t\t\t  }\r\n            `\r\n\t\t\tGQL(query).then(resp => {\r\n\t\t\t\tif (resp.errors) return (reject(resp.errors));\r\n\t\t\t\tif (resp.data && resp.data.reqResetPassword) return (resolve(true));\r\n\t\t\t\treturn (resolve([]))\r\n\t\t\t}).catch(err => {\r\n\t\t\t\treturn (reject(err));\r\n\t\t\t})\r\n\t\t})\r\n\t},\r\n\tresetPassword: (username, salt, password) => {\r\n\t\treturn new Promise((resolve, reject) => {\r\n\t\t\tconst query = `\r\n\t\t\tmutation {\r\n\t\t\t\tresetNewPassword(username:\"${username}\", salt: \"${salt}\", password:\"${password}\")\r\n\t\t\t  }\r\n            `\r\n\t\t\tGQL(query).then(resp => {\r\n\t\t\t\tif (resp.errors) return (reject(resp.errors));\r\n\t\t\t\tif (resp.data && resp.data.resetNewPassword) return (resolve(true));\r\n\t\t\t\treturn (resolve([]))\r\n\t\t\t}).catch(err => {\r\n\t\t\t\treturn (reject(err));\r\n\t\t\t})\r\n\t\t})\r\n\t},\r\n\tloginUser: (username, password) => {\r\n\t\treturn new Promise((resolve, reject) => {\r\n\t\t\tconst query = `\r\n\t\t\tquery {\r\n\t\t\t\tloginUser(username:\"${username}\",password:\"${password}\"){\r\n\t\t\t\t\tclientID\r\n\t\t\t\t\ttoken\r\n\t\t\t\t\tsuperadmin\r\n\t\t\t\t\tjenisUser\r\n\t\t\t\t\tklinik{\r\n\t\t\t\t\t\tkodeklinik\r\n\t\t\t\t\t\tnamaklinik\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t  }\r\n            `\r\n\t\t\tGQL(query).then(resp => {\r\n\t\t\t\tif (resp.errors) return (reject(resp.errors));\r\n\t\t\t\tif (resp.data && resp.data.loginUser) return (resolve(resp.data.loginUser));\r\n\t\t\t\treturn (resolve([]))\r\n\t\t\t}).catch(err => {\r\n\t\t\t\treturn (reject(err));\r\n\t\t\t})\r\n\t\t})\r\n\t},\r\n\tdetailUser: (clientID, token, username, jenisUser) => {\r\n\t\treturn new Promise((resolve, reject) => {\r\n\t\t\tconst query = `\r\n                query {\r\n                    detailUser(username:\"${username}\",jenisUser:\"${jenisUser}\"){\r\n                        username\r\n                        nama\r\n\t\t\t\t\t\tnoHp\r\n\t\t\t\t\t\talamat\r\n                  }\r\n                }\r\n            `\r\n\t\t\tGQL(query, clientID, token).then(resp => {\r\n\t\t\t\tif (resp.errors) return (reject(resp.errors));;\r\n\t\t\t\tif (resp.data && resp.data.detailUser) return (resolve(resp.data.detailUser));\r\n\t\t\t\treturn (resolve([]))\r\n\t\t\t}).catch(err => {\r\n\t\t\t\treturn (reject(err));\r\n\t\t\t})\r\n\t\t})\r\n\t},\r\n\tupdateProfil: (clientID, token, username,  nama, noHp, alamat, jenisUser,  kodeklinik, namaklinik) => {\r\n\t\treturn new Promise((resolve, reject) => {\r\n\t\t\tconst query = `\r\n\t\t\tmutation {\r\n\t\t\t\tsimpanUser(input:{username:\"${username}\", nama:\"${nama}\", noHp:\"${noHp}\", alamat:\"${alamat}\", jenisUser:\"${jenisUser}\"},kodeklinik: \"${kodeklinik}\", namaklinik: \"${namaklinik}\")\r\n\t\t\t  }\r\n            `\r\n\t\t\tGQL(query, clientID, token).then(resp => {\r\n\t\t\t\tif (resp.errors) return (reject(resp.errors));\r\n\t\t\t\tif (resp.data && resp.data.simpanUser) return (resolve(true));\r\n\t\t\t\treturn (resolve([]))\r\n\t\t\t}).catch(err => {\r\n\t\t\t\treturn (reject(err));\r\n\t\t\t})\r\n\t\t})\r\n\t},\r\n};\r\n\r\nexport default User;\r\n","const numberWithCommas = (x) => {\r\n    if (!x) x = 0;\r\n    const a = parseFloat(Math.round(x * 100) / 100).toFixed(2)\r\n    return a.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\r\n}\r\nexport default numberWithCommas;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType } from './utils';\nvar propTypes = {\n  tag: tagPropType,\n  inverse: PropTypes.bool,\n  color: PropTypes.string,\n  body: PropTypes.bool,\n  outline: PropTypes.bool,\n  className: PropTypes.string,\n  cssModule: PropTypes.object,\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.string, PropTypes.func])\n};\nvar defaultProps = {\n  tag: 'div'\n};\n\nvar Card = function Card(props) {\n  var className = props.className,\n      cssModule = props.cssModule,\n      color = props.color,\n      body = props.body,\n      inverse = props.inverse,\n      outline = props.outline,\n      Tag = props.tag,\n      innerRef = props.innerRef,\n      attributes = _objectWithoutPropertiesLoose(props, [\"className\", \"cssModule\", \"color\", \"body\", \"inverse\", \"outline\", \"tag\", \"innerRef\"]);\n\n  var classes = mapToCssModules(classNames(className, 'card', inverse ? 'text-white' : false, body ? 'card-body' : false, color ? (outline ? 'border' : 'bg') + \"-\" + color : false), cssModule);\n  return React.createElement(Tag, _extends({}, attributes, {\n    className: classes,\n    ref: innerRef\n  }));\n};\n\nCard.propTypes = propTypes;\nCard.defaultProps = defaultProps;\nexport default Card;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType } from './utils';\nvar propTypes = {\n  tag: tagPropType,\n  className: PropTypes.string,\n  cssModule: PropTypes.object,\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.string, PropTypes.func])\n};\nvar defaultProps = {\n  tag: 'div'\n};\n\nvar CardBody = function CardBody(props) {\n  var className = props.className,\n      cssModule = props.cssModule,\n      innerRef = props.innerRef,\n      Tag = props.tag,\n      attributes = _objectWithoutPropertiesLoose(props, [\"className\", \"cssModule\", \"innerRef\", \"tag\"]);\n\n  var classes = mapToCssModules(classNames(className, 'card-body'), cssModule);\n  return React.createElement(Tag, _extends({}, attributes, {\n    className: classes,\n    ref: innerRef\n  }));\n};\n\nCardBody.propTypes = propTypes;\nCardBody.defaultProps = defaultProps;\nexport default CardBody;","import React, { Fragment } from \"react\";\r\nimport { Breadcrumb, BreadcrumbItem } from \"reactstrap\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport IntlMessages from \"../../helpers/IntlMessages\";\r\n\r\nconst getMenuTitle = sub => {\r\n  return <IntlMessages id={`menu.${sub}`} />;\r\n};\r\n\r\nconst getUrl = (path, sub, index) => {\r\n  if (index === 0) {\r\n    return \"\";\r\n  } else {\r\n    return path.split(sub)[0] + sub;\r\n  }\r\n};\r\n\r\nconst BreadcrumbContainer = ({ heading, match }) => {\r\n  return (\r\n    <Fragment>\r\n      {heading && <h1><IntlMessages id={heading}/></h1>}\r\n      <BreadcrumbItems match={match} />\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport const BreadcrumbItems = ({ match }) => {\r\n  const path = match.path.substr(1);\r\n  let paths = path.split(\"/\");\r\n  if (paths[paths.length - 1].indexOf(\":\") > -1) {\r\n    paths = paths.filter(x => x.indexOf(\":\") === -1);\r\n  }\r\n  return (\r\n    <Fragment>\r\n      <Breadcrumb className=\"pt-0 breadcrumb-container d-none d-sm-block d-lg-inline-block\">\r\n        {paths.map((sub, index) => {\r\n          return (\r\n            <BreadcrumbItem key={index} active={paths.length === index + 1}>\r\n              {paths.length !== index + 1 ? (\r\n                <NavLink to={\"/\" + getUrl(path, sub, index)}>\r\n                  {getMenuTitle(sub)}\r\n                </NavLink>\r\n              ) : (\r\n                getMenuTitle(sub)\r\n              )}\r\n            </BreadcrumbItem>\r\n          );\r\n        })}\r\n      </Breadcrumb>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default BreadcrumbContainer;\r\n","import GQL from '../helpers/GQL'\r\nimport moment from 'moment-timezone'\r\n\r\n\r\nconst Transaksi = {\r\n    listJanji: (clientID, token, kodeklinik, tanggal) => {\r\n        return new Promise((resolve, reject) => {\r\n            const query = `\r\n                query {\r\n                    listJanjiNotConfirm(kodeklinik:\"${kodeklinik}\",tanggal:\"${moment(tanggal).format(\"YYYY-MM-DD\")}\"){\r\n                        _id\r\n                        kodetrans\r\n                        pasien\r\n                        keperluanPasien\r\n                        kodedokter\r\n                        janji{\r\n                          tanggalJanji\r\n                          jamMulaiJanji\r\n                          jamSelesaiJanji\r\n                        }\r\n                  }\r\n                }\r\n            `\r\n            GQL(query, clientID, token).then(resp => {\r\n                if (resp.errors) return (reject(resp.errors));\r\n                const listJanji = []\r\n                resp.data.listJanjiNotConfirm.map(el => {\r\n                    return listJanji.push({\r\n                        ...el,\r\n                        tanggalJanji: el.janji.tanggalJanji,\r\n                        jamMulaiJanji: el.janji.jamMulaiJanji,\r\n                        jamSelesaiJanji: el.janji.jamSelesaiJanji,\r\n                    })\r\n                })\r\n                if (resp.data && resp.data.listJanjiNotConfirm) return (resolve(listJanji));\r\n                return (resolve([]))\r\n            }).catch(err => {\r\n                return (reject(err));\r\n            })\r\n        })\r\n    },\r\n    listJanjiByDokter: (clientID, token, kodeklinik, tanggal, dokter) => {\r\n        return new Promise((resolve, reject) => {\r\n            const query = `\r\n                query {\r\n                    listJanjibyDokterConfirm(kodeklinik:\"${kodeklinik}\",tanggal:\"${moment(tanggal).format(\"YYYY-MM-DD\")}\", dokter:\"${dokter}\"){\r\n                        _id\r\n                        kodetrans\r\n                        pasien\r\n                        keperluanPasien\r\n                        kodedokter\r\n                        janji{\r\n                          tanggalJanji\r\n                          jamMulaiJanji\r\n                          jamSelesaiJanji\r\n                        }\r\n                  } \r\n                  listBuatJanjibyDokter(kodeklinik:\"${kodeklinik}\",tanggal:\"${moment(tanggal).format(\"YYYY-MM-DD\")}\", dokter:\"${dokter}\"){\r\n                    _id\r\n                    kodetrans\r\n                    pasien\r\n                    keperluanPasien\r\n                    kodedokter\r\n                    janji{\r\n                      tanggalJanji\r\n                      jamMulaiJanji\r\n                      jamSelesaiJanji\r\n                    }\r\n                }\r\n                  PasienDiperiksaByDokter(kodeklinik:\"${kodeklinik}\",tanggal:\"${moment(tanggal).format(\"YYYY-MM-DD\")}\", dokter:\"${dokter}\"){\r\n                    _id\r\n                    kodetrans\r\n                    pasien\r\n                    keperluanPasien\r\n                    kodedokter\r\n                    janji{\r\n                      tanggalJanji\r\n                      jamMulaiJanji\r\n                      jamSelesaiJanji\r\n                    }\r\n              }\r\n                }\r\n            `\r\n            GQL(query, clientID, token).then(resp => {\r\n                const listJanji = []\r\n                if (resp.data.listJanjibyDokterConfirm) {\r\n                    resp.data.listJanjibyDokterConfirm.map(el => {\r\n                        return listJanji.push({\r\n                            ...el,\r\n                            tanggalJanji: el.janji.tanggalJanji,\r\n                            jamMulaiJanji: el.janji.jamMulaiJanji,\r\n                            jamSelesaiJanji: el.janji.jamSelesaiJanji,\r\n                        })\r\n                    })\r\n                }\r\n                const listDiperiksa = []\r\n                if (resp.data.PasienDiperiksaByDokter) {\r\n                    resp.data.PasienDiperiksaByDokter.map(el => {\r\n                        return listDiperiksa.push({\r\n                            ...el,\r\n                            tanggalJanji: el.janji.tanggalJanji,\r\n                            jamMulaiJanji: el.janji.jamMulaiJanji,\r\n                            jamSelesaiJanji: el.janji.jamSelesaiJanji,\r\n                        })\r\n                    })\r\n                }\r\n                const buatJanji = []\r\n                if (resp.data.listBuatJanjibyDokter) {\r\n                    resp.data.listBuatJanjibyDokter.map(el => {\r\n                        return buatJanji.push({\r\n                            ...el,\r\n                            tanggalJanji: el.janji.tanggalJanji,\r\n                            jamMulaiJanji: el.janji.jamMulaiJanji,\r\n                            jamSelesaiJanji: el.janji.jamSelesaiJanji,\r\n                        })\r\n                    })\r\n                }\r\n                if (resp.data) return (resolve({ listJanji, listDiperiksa, buatJanji }));\r\n                return (resolve([]))\r\n            }).catch(err => {\r\n                return (reject(err));\r\n            })\r\n        })\r\n    },\r\n    konfirmasiHadir: (clientID, token, id) => {\r\n        return new Promise((resolve, reject) => {\r\n            const query = `\r\n            mutation {\r\n                    konfirmasiJanji( _id:\"${id}\")\r\n                }\r\n            `\r\n            GQL(query, clientID, token).then(resp => {\r\n                if (resp.errors) return (reject(resp.errors));;\r\n                if (resp.data && resp.data.konfirmasiJanji) return (resolve(resp.data.konfirmasiJanji));\r\n                return (resolve([]))\r\n            }).catch(err => {\r\n                return (reject(err));\r\n            })\r\n        })\r\n    },\r\n    konfirmasiDiperiksa: (clientID, token, id) => {\r\n        return new Promise((resolve, reject) => {\r\n            const query = `\r\n            mutation {\r\n                    konfirmasiDiperiksa( _id:\"${id}\")\r\n                }\r\n            `\r\n            GQL(query, clientID, token).then(resp => {\r\n                if (resp.errors) return (reject(resp.errors));;\r\n                if (resp.data && resp.data.konfirmasiDiperiksa) return (resolve(resp.data.konfirmasiDiperiksa));\r\n                return (resolve([]))\r\n            }).catch(err => {\r\n                return (reject(err));\r\n            })\r\n        })\r\n    },\r\n    batalkanJanji: (clientID, token, id, alasanBatal) => {\r\n        return new Promise((resolve, reject) => {\r\n            const query = `\r\n            mutation {\r\n                    batalJanji( _id:\"${id}\", alasanBatal:\"${alasanBatal}\")\r\n                }\r\n            `\r\n            GQL(query, clientID, token).then(resp => {\r\n                if (resp.errors) return (reject(resp.errors));;\r\n                if (resp.data && resp.data.batalJanji) return (resolve(resp.data.batalJanji));\r\n                return (resolve([]))\r\n            }).catch(err => {\r\n                return (reject(err));\r\n            })\r\n        })\r\n    },\r\n    listAntrian: (clientID, token, kodeklinik, tanggal) => {\r\n        return new Promise((resolve, reject) => {\r\n            const query = `\r\n                query {\r\n                    listJanjiConfirm(kodeklinik:\"${kodeklinik}\",tanggal:\"${moment(tanggal).format(\"YYYY-MM-DD\")}\"){\r\n                        _id\r\n                        kodetrans\r\n                        pasien\r\n                        keperluanPasien\r\n                        kodedokter\r\n                        janji{\r\n                          tanggalJanji\r\n                          jamMulaiJanji\r\n                          jamSelesaiJanji\r\n                        }\r\n                    } \r\n                    listPasienDiperiksa(kodeklinik:\"${kodeklinik}\",tanggal:\"${moment(tanggal).format(\"YYYY-MM-DD\")}\"){\r\n                        _id\r\n                        kodetrans\r\n                        pasien\r\n                        keperluanPasien\r\n                        kodedokter\r\n                        janji{\r\n                            tanggalJanji\r\n                            jamMulaiJanji\r\n                            jamSelesaiJanji\r\n                        }\r\n                    }\r\n                }\r\n            `\r\n            GQL(query, clientID, token).then(resp => {\r\n                const listJanji = []\r\n                if (resp.data.listJanjiConfirm) {\r\n                    resp.data.listJanjiConfirm.map(el => {\r\n                        return listJanji.push({\r\n                            ...el,\r\n                            tanggalJanji: el.janji.tanggalJanji,\r\n                            jamMulaiJanji: el.janji.jamMulaiJanji,\r\n                            jamSelesaiJanji: el.janji.jamSelesaiJanji,\r\n                        })\r\n                    })\r\n                }\r\n                const listDiperiksa = []\r\n                if (resp.data.listPasienDiperiksa) {\r\n                    resp.data.listPasienDiperiksa.map(el => {\r\n                        return listDiperiksa.push({\r\n                            ...el,\r\n                            tanggalJanji: el.janji.tanggalJanji,\r\n                            jamMulaiJanji: el.janji.jamMulaiJanji,\r\n                            jamSelesaiJanji: el.janji.jamSelesaiJanji,\r\n                        })\r\n                    })\r\n                }\r\n                if (resp.data) return (resolve({ listJanji, listDiperiksa }));\r\n                return (resolve([]))\r\n            }).catch(err => {\r\n                return (reject(err));\r\n            })\r\n        })\r\n    },\r\n    dataPasien: (clientID, token, pasien) => {\r\n        return new Promise((resolve, reject) => {\r\n            const query = `\r\n                query {\r\n                    detailUser(username:\"${pasien}\",jenisUser:\"pasien\"){\r\n                        nama\r\n                        noHp\r\n                        riwayatPenyakit{\r\n                            penyakit\r\n                          }\r\n                  }\r\n                }\r\n            `\r\n            GQL(query, clientID, token).then(resp => {\r\n                if (resp.errors) return (reject(resp.errors));\r\n                if (resp.data && resp.data.detailUser) return (resolve(resp.data.detailUser));\r\n                return (resolve([]))\r\n            }).catch(err => {\r\n                return (reject(err));\r\n            })\r\n        })\r\n    },\r\n    saveRiwayatPenyakit: (clientID, token, pasien, penyakit) => {\r\n        return new Promise((resolve, reject) => {\r\n            const query = `\r\n            mutation {\r\n                    addRiwayatPenyakit( username:\"${pasien}\", penyakit:\"${penyakit}\")\r\n                }\r\n            `\r\n            GQL(query, clientID, token).then(resp => {\r\n                if (resp.errors) return (reject(resp.errors));;\r\n                if (resp.data && resp.data.addRiwayatPenyakit) return (resolve(resp.data.addRiwayatPenyakit));\r\n                return (resolve([]))\r\n            }).catch(err => {\r\n                return (reject(err));\r\n            })\r\n        })\r\n    },\r\n    loadProduk: (clientID, token, kodeklinik) => {\r\n        return new Promise((resolve, reject) => {\r\n            const query = `\r\n                query {\r\n                    cekStok(kodeklinik:\"${kodeklinik}\"){\r\n                        kodeProduk\r\n                        namaProduk\r\n                        harga\r\n                        satuan\r\n                  }\r\n                  listLayanan(kodeklinik:\"${kodeklinik}\"){\r\n                    kodeLayanan\r\n                    namaLayanan\r\n                    harga\r\n                  }\r\n                }\r\n            `\r\n            GQL(query, clientID, token).then(resp => {\r\n                if (resp.errors) return (reject(resp.errors));\r\n                const produk = resp.data.cekStok\r\n                const layanan = resp.data.listLayanan\r\n                if (resp.data && resp.data.cekStok && layanan) return (resolve({ produk, layanan }));\r\n                return (resolve([]))\r\n            }).catch(err => {\r\n                return (reject(err));\r\n            })\r\n        })\r\n    },\r\n    listPeralatan: (clientID, token, id) => {\r\n        return new Promise((resolve, reject) => {\r\n            const query = `\r\n                query {\r\n                    listPeralatan(_id: \"${id}\"){\r\n                        kodeProduk\r\n                        namaProduk\r\n                        harga\r\n                        qty\r\n                        satuan\r\n                    }\r\n                }\r\n            `\r\n            GQL(query, clientID, token).then(resp => {\r\n                if (resp.errors) return (reject(resp.errors));\r\n                if (resp.data && resp.data.listPeralatan) return (resolve(resp.data.listPeralatan));\r\n                return (resolve([]))\r\n            }).catch(err => {\r\n                return (reject(err));\r\n            })\r\n        })\r\n    },\r\n    savePeralatan: (clientID, token, id, produk, qty) => {\r\n        return new Promise((resolve, reject) => {\r\n            const query = `\r\n            mutation {\r\n                simpanPeralatan(_id: \"${id}\", kodeProduk: \"${produk.kodeProduk}\", namaProduk: \"${produk.namaProduk}\", harga: ${produk.harga}, qty : ${qty}, satuan:\"${produk.satuan}\")\r\n                }\r\n            `\r\n            GQL(query, clientID, token).then(resp => {\r\n                if (resp.errors) return (reject(resp.errors));;\r\n                if (resp.data && resp.data.simpanPeralatan) return (resolve(resp.data.simpanPeralatan));\r\n                return (resolve([]))\r\n            }).catch(err => {\r\n                return (reject(err));\r\n            })\r\n        })\r\n    },\r\n    editPeralatan: (clientID, token, id, produk, qty) => {\r\n        return new Promise((resolve, reject) => {\r\n            const query = `\r\n            mutation {\r\n                editPeralatan(_id: \"${id}\", kodeProduk: \"${produk.kodeProduk}\", namaProduk: \"${produk.namaProduk}\", harga: ${produk.harga}, qty : ${qty}, satuan:\"${produk.satuan}\")\r\n                }\r\n            `\r\n            GQL(query, clientID, token).then(resp => {\r\n                if (resp.errors) return (reject(resp.errors));;\r\n                if (resp.data && resp.data.editPeralatan) return (resolve(resp.data.editPeralatan));\r\n                return (resolve([]))\r\n            }).catch(err => {\r\n                return (reject(err));\r\n            })\r\n        })\r\n    },\r\n    hapusPeralatan: (clientID, token, id, kodeProduk, qty) => {\r\n        return new Promise((resolve, reject) => {\r\n            const query = `\r\n            mutation {\r\n                hapusPeralatan(_id: \"${id}\", kodeProduk: \"${kodeProduk}\")\r\n                }\r\n            `\r\n            GQL(query, clientID, token).then(resp => {\r\n                if (resp.errors) return (reject(resp.errors));;\r\n                if (resp.data && resp.data.hapusPeralatan) return (resolve(resp.data.hapusPeralatan));\r\n                return (resolve([]))\r\n            }).catch(err => {\r\n                return (reject(err));\r\n            })\r\n        })\r\n    },\r\n    listResepObat: (clientID, token, id) => {\r\n        return new Promise((resolve, reject) => {\r\n            const query = `\r\n                query {\r\n                    listResepObat(_id: \"${id}\"){\r\n                        kodeProduk\r\n                        namaProduk\r\n                        harga\r\n                        qty\r\n                        satuan\r\n                        keterangan\r\n                    }\r\n                }\r\n            `\r\n            GQL(query, clientID, token).then(resp => {\r\n                if (resp.errors) return (reject(resp.errors));\r\n                if (resp.data && resp.data.listResepObat) return (resolve(resp.data.listResepObat));\r\n                return (resolve([]))\r\n            }).catch(err => {\r\n                return (reject(err));\r\n            })\r\n        })\r\n    },\r\n    simpanResepObat: (clientID, token, id, produk, qty, keterangan) => {\r\n        return new Promise((resolve, reject) => {\r\n            const query = `\r\n            mutation {\r\n                simpanResepObat(_id: \"${id}\", kodeProduk: \"${produk.kodeProduk}\", namaProduk: \"${produk.namaProduk}\", harga: ${produk.harga}, qty : ${qty}, satuan:\"${produk.satuan}\",keterangan:\"${keterangan}\")\r\n                }\r\n            `\r\n            GQL(query, clientID, token).then(resp => {\r\n                if (resp.errors) return (reject(resp.errors));;\r\n                if (resp.data && resp.data.simpanResepObat) return (resolve(resp.data.simpanResepObat));\r\n                return (resolve([]))\r\n            }).catch(err => {\r\n                return (reject(err));\r\n            })\r\n        })\r\n    },\r\n    editResepObat: (clientID, token, id, produk, qty, keterangan) => {\r\n        return new Promise((resolve, reject) => {\r\n            const query = `\r\n            mutation {\r\n                editResepObat(_id: \"${id}\", kodeProduk: \"${produk.kodeProduk}\", namaProduk: \"${produk.namaProduk}\", harga: ${produk.harga}, qty : ${qty}, satuan:\"${produk.satuan}\",keterangan:\"${keterangan}\")\r\n                }\r\n            `\r\n            GQL(query, clientID, token).then(resp => {\r\n                if (resp.errors) return (reject(resp.errors));;\r\n                if (resp.data && resp.data.editResepObat) return (resolve(resp.data.editResepObat));\r\n                return (resolve([]))\r\n            }).catch(err => {\r\n                return (reject(err));\r\n            })\r\n        })\r\n    },\r\n    hapusResepObat: (clientID, token, id, kodeProduk, qty) => {\r\n        return new Promise((resolve, reject) => {\r\n            const query = `\r\n            mutation {\r\n                hapusResepObat(_id: \"${id}\", kodeProduk: \"${kodeProduk}\")\r\n                }\r\n            `\r\n            GQL(query, clientID, token).then(resp => {\r\n                if (resp.errors) return (reject(resp.errors));;\r\n                if (resp.data && resp.data.hapusResepObat) return (resolve(resp.data.hapusResepObat));\r\n                return (resolve([]))\r\n            }).catch(err => {\r\n                return (reject(err));\r\n            })\r\n        })\r\n    },\r\n    finishPemeriksaanDokter: (clientID, token, id, catatanDokter, isDatangKembali, tanggal, ket) => {\r\n        return new Promise((resolve, reject) => {\r\n            const query = `\r\n            mutation {\r\n                finishPemeriksaanDokter(_id: \"${id}\",catatanDokter:\"${catatanDokter}\", isDatangKembali:${isDatangKembali}, tanggal: \"${tanggal}\", keterangan: \"${ket}\")\r\n                }\r\n            `\r\n            GQL(query, clientID, token).then(resp => {\r\n                if (resp.errors) return (reject(resp.errors));;\r\n                if (resp.data && resp.data.finishPemeriksaanDokter) return (resolve(resp.data.finishPemeriksaanDokter));\r\n                return (resolve([]))\r\n            }).catch(err => {\r\n                return (reject(err));\r\n            })\r\n        })\r\n    },\r\n    rekamMedis: (clientID, token, kodeklinik, pasien) => {\r\n        return new Promise((resolve, reject) => {\r\n            const query = `\r\n                query {\r\n                    listRekamMedis(pasien:\"${pasien}\", kodeklinik:\"${kodeklinik}\"){\r\n                        _id\r\n                        kodetrans\r\n                        kodedokter\r\n                        pasien\r\n                        janji{\r\n                            tanggalJanji\r\n                            jamMulaiJanji\r\n                            jamSelesaiJanji\r\n                        }\r\n                        keperluanPasien\r\n                        catatanDokter\r\n                        layanan{\r\n                            kodeLayanan\r\n                             namaLayanan\r\n                             qty\r\n                             keterangan\r\n                         }\r\n                         resepObatdokter{\r\n                             kodeProduk\r\n                             namaProduk\r\n                             qty\r\n                             satuan\r\n                             keterangan\r\n                         }\r\n                         totalTagihan\r\n                         tanggalBayar\r\n                         isDatangKembali\r\n                         datangKembali{\r\n                            tanggal\r\n                            keterangan\r\n                        }\r\n                        jamupt\r\n                  }\r\n                }\r\n            `\r\n            GQL(query, clientID, token).then(resp => {\r\n                if (resp.errors) return (reject(resp.errors));\r\n                const rekamMedis = []\r\n                resp.data.listRekamMedis.map(el => {\r\n                    return rekamMedis.push({\r\n                        ...el,\r\n                        tanggalJanji: el.janji.tanggalJanji\r\n                    })\r\n                })\r\n                if (resp.data && resp.data.listRekamMedis) return (resolve(rekamMedis));\r\n                return (resolve([]))\r\n            }).catch(err => {\r\n                return (reject(err));\r\n            })\r\n        })\r\n    },\r\n    listLayanan: (clientID, token, id) => {\r\n        return new Promise((resolve, reject) => {\r\n            const query = `\r\n                query {\r\n                    listLayananTrans(_id: \"${id}\"){\r\n                        kodeLayanan\r\n                        namaLayanan\r\n                        harga\r\n                        qty\r\n                        satuan\r\n                        keterangan\r\n                    }\r\n                }\r\n            `\r\n            GQL(query, clientID, token).then(resp => {\r\n                if (resp.errors) return (reject(resp.errors));\r\n                if (resp.data && resp.data.listLayananTrans) return (resolve(resp.data.listLayananTrans));\r\n                return (resolve([]))\r\n            }).catch(err => {\r\n                return (reject(err));\r\n            })\r\n        })\r\n    },\r\n    simpanLayanan: (clientID, token, id, layanan, qty, keterangan) => {\r\n        return new Promise((resolve, reject) => {\r\n            const query = `\r\n            mutation {\r\n                simpanLayananTrans(_id: \"${id}\", kodeLayanan: \"${layanan.kodeLayanan}\", namaLayanan: \"${layanan.namaLayanan}\", harga: ${layanan.harga}, qty : ${qty},keterangan:\"${keterangan}\")\r\n                }\r\n            `\r\n            GQL(query, clientID, token).then(resp => {\r\n                if (resp.errors) return (reject(resp.errors));;\r\n                if (resp.data && resp.data.simpanLayanan) return (resolve(resp.data.simpanLayanan));\r\n                return (resolve([]))\r\n            }).catch(err => {\r\n                return (reject(err));\r\n            })\r\n        })\r\n    },\r\n    editLayanan: (clientID, token, id, layanan, qty, keterangan) => {\r\n        return new Promise((resolve, reject) => {\r\n            const query = `\r\n            mutation {\r\n                editLayananTrans(_id: \"${id}\", kodeLayanan: \"${layanan.kodeLayanan}\", namaLayanan: \"${layanan.namaLayanan}\", harga: ${layanan.harga}, qty : ${qty},keterangan:\"${keterangan}\")\r\n                }\r\n            `\r\n            GQL(query, clientID, token).then(resp => {\r\n                if (resp.errors) return (reject(resp.errors));;\r\n                if (resp.data && resp.data.editLayanan) return (resolve(resp.data.editLayanan));\r\n                return (resolve([]))\r\n            }).catch(err => {\r\n                return (reject(err));\r\n            })\r\n        })\r\n    },\r\n    hapusLayanan: (clientID, token, id, kodeLayanan) => {\r\n        return new Promise((resolve, reject) => {\r\n            const query = `\r\n            mutation {\r\n                hapusLayananTrans(_id: \"${id}\", kodeLayanan:\"${kodeLayanan}\")\r\n            }\r\n            `\r\n            GQL(query, clientID, token).then(resp => {\r\n                if (resp.errors) return (reject(resp.errors));;\r\n                if (resp.data && resp.data.hapusLayananTrans) return (resolve(resp.data.hapusLayananTrans));\r\n                return (resolve([]))\r\n            }).catch(err => {\r\n                return (reject(err));\r\n            })\r\n        })\r\n    },\r\n    listPembayaran: (clientID, token, kodeklinik, tanggal) => {\r\n        return new Promise((resolve, reject) => {\r\n            const query = `\r\n                query {\r\n                    listPembayaran(kodeklinik:\"${kodeklinik}\",tanggal:\"${moment(tanggal).format(\"YYYY-MM-DD\")}\"){\r\n                        _id\r\n                        kodetrans\r\n                        kodedokter\r\n                        pasien\r\n                        janji{\r\n                          tanggalJanji\r\n                          jamMulaiJanji\r\n                          jamSelesaiJanji\r\n                        }\r\n                        keperluanPasien\r\n                        layanan{\r\n                           kodeLayanan\r\n                          namaLayanan\r\n                          harga\r\n                          qty\r\n                        }\r\n                        peralatan{\r\n                          kodeProduk\r\n                          namaProduk\r\n                          harga\r\n                          qty\r\n                          satuan\r\n                        }\r\n                        resepObatdokter{\r\n                          kodeProduk\r\n                          namaProduk\r\n                          harga\r\n                          qty\r\n                          satuan\r\n                        }\r\n                  }\r\n                }\r\n            `\r\n            GQL(query, clientID, token).then(resp => {\r\n                if (resp.errors) return (reject(resp.errors));\r\n                const listBayar = []\r\n                resp.data.listPembayaran.map(el => {\r\n                    return listBayar.push({\r\n                        ...el,\r\n                        tanggalJanji: el.janji.tanggalJanji,\r\n                        totObat: el.resepObatdokter.length,\r\n                        totBayar: el.layanan.map(el => el.qty * el.harga).reduce((a, b) => a + b, 0) + el.resepObatdokter.map(el => el.qty * el.harga).reduce((a, b) => a + b, 0) + el.peralatan.map(el => el.qty * el.harga).reduce((a, b) => a + b, 0)\r\n                    })\r\n                })\r\n                if (resp.data && resp.data.listPembayaran) return (resolve(listBayar));\r\n                return (resolve([]))\r\n            }).catch(err => {\r\n                return (reject(err));\r\n            })\r\n        })\r\n    },\r\n    sudahBayar: (clientID, token, id, totalTagihan, jumlahBayar) => {\r\n        return new Promise((resolve, reject) => {\r\n            const query = `\r\n            mutation {\r\n                bayarTagihan(_id: \"${id}\", totalTagihan:${totalTagihan}, jumlahBayar:${jumlahBayar})}\r\n            `\r\n            GQL(query, clientID, token).then(resp => {\r\n                if (resp.errors) return (reject(resp.errors));;\r\n                if (resp.data && resp.data.bayarTagihan) return (resolve(resp.data.bayarTagihan));\r\n                return (resolve([]))\r\n            }).catch(err => {\r\n                return (reject(err));\r\n            })\r\n        })\r\n    },\r\n    riwayatMengobatiPasien: (clientID, token, kodeklinik, dokter) => {\r\n        return new Promise((resolve, reject) => {\r\n            const query = `\r\n                query {\r\n                    riwayatMengobatiPasien(dokter:\"${dokter}\", kodeklinik:\"${kodeklinik}\"){\r\n                        _id\r\n                        kodetrans\r\n                        kodedokter\r\n                        pasien\r\n                        janji{\r\n                            tanggalJanji\r\n                            jamMulaiJanji\r\n                            jamSelesaiJanji\r\n                        }\r\n                        keperluanPasien\r\n                        catatanDokter\r\n                        layanan{\r\n                            kodeLayanan\r\n                             namaLayanan\r\n                             qty\r\n                         }\r\n                         resepObatdokter{\r\n                             kodeProduk\r\n                             namaProduk\r\n                             qty\r\n                             satuan\r\n                         }\r\n                         totalTagihan\r\n                         tanggalBayar\r\n                         isDatangKembali\r\n                         datangKembali{\r\n                            tanggal\r\n                            keterangan\r\n                        }\r\n                        jamupt\r\n                  }\r\n                }\r\n            `\r\n            GQL(query, clientID, token).then(resp => {\r\n                if (resp.errors) return (reject(resp.errors));\r\n                const rekamMedis = []\r\n                resp.data.riwayatMengobatiPasien.map(el => {\r\n                    return rekamMedis.push({\r\n                        ...el,\r\n                        tanggalJanji: el.janji.tanggalJanji\r\n                    })\r\n                })\r\n                if (resp.data && resp.data.riwayatMengobatiPasien) return (resolve(rekamMedis));\r\n                return (resolve([]))\r\n            }).catch(err => {\r\n                return (reject(err));\r\n            })\r\n        })\r\n    },\r\n\r\n};\r\n\r\nexport default Transaksi;\r\n","import React, { Fragment, useState, useEffect } from \"react\";\r\nimport { Col, Card, CardBody, Row, } from \"reactstrap\";\r\nimport numberWithCommas from \"reactnumberwithcommas\";\r\nimport mTrans from '../../../Controler/c_Transaksi'\r\nimport moment from 'moment-timezone'\r\n\r\nconst Riwayat = props => {\r\n    const authLogin = props.authLogin\r\n    const [listRekamMedis, setListRekamMedis] = useState([])\r\n    useEffect(() => {\r\n        mTrans.rekamMedis(authLogin.clientID, authLogin.token, authLogin.klinik.kodeklinik, authLogin.username).then(resp => {\r\n            setListRekamMedis(resp)\r\n        }).catch(err => {\r\n            console.error(err);\r\n        })\r\n        return () => {\r\n\r\n        }\r\n    }, [authLogin.clientID, authLogin.token, authLogin.username, authLogin.klinik.kodeklinik])\r\n    return (\r\n        <Fragment>\r\n            <Col>\r\n                {listRekamMedis.sort((a, b) => {\r\n                    let aa = moment(a.datangKembali.tanggal).format(\"DD-MM-YYYY\").split('/').reverse().join(),\r\n                        bb = moment(b.datangKembali.tanggal).format(\"DD-MM-YYYY\").split('/').reverse().join();\r\n                    return aa < bb ? -1 : (aa > bb ? 1 : 0);\r\n                }).map((datas, i) => {\r\n                    return (\r\n                        <Card className=\"marginCard\" key={i}>\r\n                            <CardBody>\r\n                                <Row>\r\n                                    <Col xs={12} md={6}>\r\n                                        <h6>Tanggal Berobat: <b>{moment(datas.janji.tanggalJanji).format(\"DD-MM-YYYY\")}</b></h6>\r\n                                        <h6>Catatan Dokter : <b>{datas.catatanDokter}</b></h6>\r\n                                        {datas.isDatangKembali && (\r\n                                            <i>\r\n                                                <h6>Datang Kembali Tanggal: <b>{moment(datas.datangKembali.tanggal).format(\"DD-MM-YYYY\")}</b></h6>\r\n                                                <h6>Keterangan : <b>{datas.datangKembali.keterangan}</b></h6>\r\n                                            </i>\r\n                                        )}\r\n                                        <h6><b>Layanan</b></h6>\r\n                                        {datas.layanan.length > 0 && datas.layanan.map((el, i) => (\r\n                                            <p index={i}>- {el.namaLayanan} * {el.qty}</p>\r\n                                        ))}\r\n                                        <h6><b>Obat Dari Dokter</b></h6>\r\n                                        {datas.resepObatdokter.length > 0 && datas.resepObatdokter.map((el, i) => (\r\n                                            <p index={i}>- {el.namaProduk} * {el.qty}</p>\r\n                                        ))}\r\n                                    </Col>\r\n                                    <Col xs={12} md={6}>\r\n                                        <h6 className=\"text-right\"><b><i>{numberWithCommas(datas.totalTagihan)}</i></b></h6>\r\n                                    </Col>\r\n                                </Row>\r\n                            </CardBody>\r\n                        </Card>\r\n                    )\r\n                })}\r\n            </Col>\r\n        </Fragment>\r\n    )\r\n}\r\nexport default Riwayat\r\n","import React, { Fragment, useState, useEffect } from \"react\";\r\nimport { Col, Card, CardBody, Row, } from \"reactstrap\";\r\nimport mTrans from '../../../Controler/c_Transaksi'\r\nimport moment from 'moment-timezone'\r\n\r\nconst Riwayat = props => {\r\n    const authLogin = props.authLogin\r\n    const [listRekamMedis, setListRekamMedis] = useState([])\r\n    useEffect(() => {\r\n        mTrans.riwayatMengobatiPasien(authLogin.clientID, authLogin.token, authLogin.klinik.kodeklinik, authLogin.username).then(resp => {\r\n            setListRekamMedis(resp)\r\n        }).catch(err => {\r\n            console.error(err);\r\n        })\r\n        return () => {\r\n\r\n        }\r\n    }, [authLogin.clientID, authLogin.token, authLogin.username, authLogin.klinik.kodeklinik])\r\n    return (\r\n        <Fragment>\r\n            <Col>\r\n                {listRekamMedis.sort((a, b) => {\r\n                    let aa = moment(a.datangKembali.tanggal).format(\"DD-MM-YYYY\").split('/').reverse().join(),\r\n                        bb = moment(b.datangKembali.tanggal).format(\"DD-MM-YYYY\").split('/').reverse().join();\r\n                    return aa < bb ? -1 : (aa > bb ? 1 : 0);\r\n                }).map((datas, i) => {\r\n                    return (\r\n                        <Card className=\"marginCard\" key={i}>\r\n                            <CardBody>\r\n                                <Row>\r\n                                    <Col xs={12} md={12}>\r\n                                        <h6>Tanggal Berobat: <b>{moment(datas.janji.tanggalJanji).format(\"DD-MM-YYYY\")}</b></h6>\r\n                                        <h6>Pasien : <b>{datas.pasien}</b></h6>\r\n                                        <h6>Catatan Anda : <b>{datas.catatanDokter}</b></h6>\r\n                                        {datas.isDatangKembali && (\r\n                                            <i>\r\n                                                <h6>Datang Kembali Tanggal: <b>{moment(datas.datangKembali.tanggal).format(\"DD-MM-YYYY\")}</b></h6>\r\n                                                <h6>Keterangan : <b>{datas.datangKembali.keterangan}</b></h6>\r\n                                            </i>\r\n                                        )}\r\n                                        <h6><b>Layanan</b></h6>\r\n                                        {datas.layanan.length > 0 && datas.layanan.map((el, i) => (\r\n                                            <p index={i}>- {el.namaLayanan} * {el.qty}</p>\r\n                                        ))}\r\n                                        <h6><b>Obat</b></h6>\r\n                                        {datas.resepObatdokter.length > 0 && datas.resepObatdokter.map((el, i) => (\r\n                                            <p index={i}>- {el.namaProduk} * {el.qty}</p>\r\n                                        ))}\r\n                                    </Col>\r\n                                </Row>\r\n                            </CardBody>\r\n                        </Card>\r\n                    )\r\n                })}\r\n            </Col>\r\n        </Fragment>\r\n    )\r\n}\r\nexport default Riwayat\r\n","import React, { Fragment, useEffect, useState } from 'react';\r\nimport { Row, Card, CardBody, Col } from \"reactstrap\";\r\nimport { Colxx, Separator } from \"../../../components/common/CustomBootstrap\";\r\nimport Breadcrumb from \"../../../containers/navs/Breadcrumb\";\r\nimport mUser from '../../../Controler/c_User'\r\nimport Skeleton from 'react-loading-skeleton';\r\nimport RiwayatPasien from './Riwayat.Pasien'\r\nimport RiwayatDokter from './Riwayat.Dokter'\r\n\r\nconst Riwayat = (props) => {\r\n  const authLogin = JSON.parse(localStorage.getItem('keminaAdmin'))\r\n  const [user, setUser] = useState({})\r\n  const [isLoad, setIsLoad] = useState(true)\r\n  useEffect(() => {\r\n    mUser.dataUser(authLogin.clientID, authLogin.token, authLogin.username, authLogin.jenisUser).then(resp => {\r\n      setUser(resp);\r\n    }).catch(err => {\r\n      console.error(err);\r\n    }).finally(() => setIsLoad(false))\r\n    return () => {\r\n\r\n    }\r\n  }, [isLoad, authLogin.clientID, authLogin.token, authLogin.username, authLogin.jenisUser])\r\n  const hakRiwayat = () => {\r\n    if (user.jenisUser === \"pasien\") {\r\n      return <RiwayatPasien authLogin={authLogin} />\r\n    } else if (user.jenisUser === \"dokter\") {\r\n      return <RiwayatDokter authLogin={authLogin} />\r\n    } else {\r\n      return <p>You do not have access rights</p>\r\n    }\r\n  }\r\n  const loadingRow = [0, 1, 2]\r\n  return (\r\n    <Fragment>\r\n      <Row>\r\n        <Colxx xxs=\"12\">\r\n          <Breadcrumb heading=\"menu.riwayat\" match={props.match} />\r\n          <Separator className=\"mb-5\" />\r\n        </Colxx>\r\n      </Row>\r\n\r\n      <Row>\r\n        {isLoad ? (\r\n          <Col>\r\n            {loadingRow.map(el => (\r\n              <Card key={el} style={{ marginTop: 5 }}>\r\n                <CardBody>\r\n                  <Skeleton height={100} />\r\n                </CardBody>\r\n              </Card>\r\n            ))}\r\n          </Col>\r\n        ) : (\r\n            hakRiwayat()\r\n          )}\r\n      </Row>\r\n    </Fragment>\r\n  )\r\n};\r\nexport default Riwayat;\r\n"],"sourceRoot":""}